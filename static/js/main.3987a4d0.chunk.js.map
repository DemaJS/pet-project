{"version":3,"sources":["reportWebVitals.ts","Reducers/Counter-reducer.ts","Reducers/App-reducer.ts","Reducers/ToDoLists-Reducer.ts","Reducers/ToDoTasks-Reducer.ts","Reducers/Users-reducers.ts","Reducers/Auth-reducer.ts","Reducers/Profile-reducer.ts","State/Store.ts","Components/Counter/Display.tsx","Components/Counter/InputComponent.tsx","Components/Counter/DisplayWithInput.tsx","Components/Counter/Counter.tsx","Images/atom.png","Components/Profile/MyProfile.tsx","Components/Profile/Posts.tsx","Components/Profile/Profile.tsx","Components/Users/User.tsx","Components/Users/Users.tsx","Images/welcome.jpg","Components/Login/Formik-login.tsx","Components/Utils/Error-Component.tsx","Components/Settings/Settings.tsx","Components/ToDo/Multi-Input.tsx","Components/ToDo/Editable-Span.tsx","Components/ToDo/ToDo-List.tsx","Components/ToDo/ToDo.tsx","App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","value","startValue","maxValue","status","error","setStatusAC","type","setErrorAC","changeToDoStatusAC","todoID","addToDoThunk","title","dispatch","axios","post","withCredentials","headers","response","data","resultCode","id","v1","addToDoAC","messages","length","changeTaskStatusAC","taskID","users","total","pageSize","currentPage","setUsersThunk","get","items","totalCount","page","email","login","isAuth","setAuthAC","setAuthThunk","a","profile","setProfileThunk","userID","rootReducer","combineReducers","counter","state","action","newValue","lists","newArray","map","el","filter","entityStatus","newToDo","filterTodoLists","find","tasks","stateCopy2","stateCopy","forEach","taskName","isDone","entityStatusTask","newTasks","userId","followed","app","auth","store","createStore","applyMiddleware","thunk","window","subscribe","localStorage","setItem","JSON","stringify","getState","Display","useSelector","useDispatch","Card","elevation","style","backgroundColor","borderRadius","CardActionArea","CardContent","Typography","variant","color","textAlign","CardActions","Button","disabled","onClick","size","startIcon","InputComponent","display","flexDirection","TextField","label","InputLabelProps","shrink","onChange","e","setMaxValueAC","parseFloat","currentTarget","marginTop","setStartValueAC","DisplayWithInput","CardHeader","getItem","valueAsNumber","parse","Counter","Grid","container","spacing","justify","margin","item","to","MyProfile","props","meID","useEffect","userName","fullName","userProfile","xs","avatar","Avatar","height","width","aria-label","src","photos","large","ava","subheader","aboutMe","component","IconButton","lookingForAJob","lookingForAJobDescription","List","ListItem","alignItems","ListItemAvatar","ListItemText","primary","contacts","github","href","Divider","website","Posts","useState","name","message","posts","setPosts","newPost","setNewPost","padding","InputProps","startAdornment","InputAdornment","position","addPost","fontSize","alt","secondary","Fragment","justifyContent","Profile","useParams","lg","User","photo","followUserAC","delete","unfollowUserAC","Users","loading","handleChange","event","LinearProgress","Pagination","count","shape","SignupForm","formik","useFormik","initialValues","password","onSubmit","values","img","maxWidth","handleSubmit","FormControl","marginLeft","FormLabel","target","FormGroup","getFieldProps","FormControlLabel","control","Checkbox","Alert","ErrorSnackbar","open","handleClose","reason","Snackbar","autoHideDuration","onClose","severity","Settings","facebook","console","log","put","resetForm","fullWidth","marginBottom","MultiInput","React","memo","toDo","setToDo","addToDo","useCallback","EditableSpan","editMode","setEditMode","setTitle","onDoubleClick","autoFocus","onBlur","changeTaskName","ToDoList","setTasksAC","setTaskName","setError","onAddTask","trim","addTask","filterTasks","t","Paper","deleteToDo","helperText","checked","changeCheckBox","inputProps","deleteTask","ButtonGroup","filterTask","ToDo","todoLists","res","deleteToDoAC","deleteToDoThunk","addTaskAC","catch","addTaskThunk","deleteTaskAC","deleteTaskThunk","filterTaskAC","changeCheckBoxAC","changeTaskNameAC","App","flexGrow","AppBar","Toolbar","textDecoration","path","render","ReactDOM","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.3987a4d0.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","const initialState = {\r\n    value: 0 as number,\r\n    startValue: 0 as number,\r\n    maxValue: 0 as number\r\n}\r\ntype initialStateType = typeof initialState\r\n\r\nexport const counterReducer = (state: initialStateType = initialState, action: actionType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"INC_VALUE\":\r\n            return {\r\n                ...state,\r\n                value: state.value + 1\r\n            };\r\n        case \"RESET_VALUE\":\r\n            return {\r\n                ...state,\r\n                value: state.value = 0\r\n            }\r\n        case \"SET_VALUE\":\r\n            return {\r\n                ...state,\r\n                value: action.newValue\r\n            }\r\n        case \"SET_START_VALUE\":\r\n            return {\r\n                ...state,\r\n                startValue: action.startValue\r\n            }\r\n        case \"SET_MAX_VALUE\":\r\n            return {\r\n                ...state,\r\n                maxValue: action.maxValue\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const incValueAC = () => ({type: 'INC_VALUE'} as const)\r\nexport const resetValueAC = () => ({type: 'RESET_VALUE'} as const)\r\nexport const setStartValueAC = (startValue: number) => ({type: 'SET_START_VALUE', startValue} as const)\r\nexport const setMaxValueAC = (maxValue: number) => ({type: 'SET_MAX_VALUE', maxValue} as const)\r\nexport const setValueAC = (newValue: number) => ({type: 'SET_VALUE', newValue} as const)\r\n\r\nexport type incValueActionType = ReturnType<typeof incValueAC>\r\nexport type resetValueActionType = ReturnType<typeof resetValueAC>\r\nexport type setStartValueActionType = ReturnType<typeof setStartValueAC>\r\nexport type setMaxValueActionType = ReturnType<typeof setMaxValueAC>\r\nexport type setValueActionType = ReturnType<typeof setValueAC>\r\n\r\nexport type actionType = incValueActionType | resetValueActionType |\r\n    setStartValueActionType | setMaxValueActionType | setValueActionType","\r\nexport type statusType = 'loading' | 'succeeded' | 'failed'\r\n\r\n\r\nconst initialState = {\r\n    status: 'loading' as statusType,\r\n    error: null as string | null\r\n}\r\n\r\ntype initialStateType = typeof initialState\r\n\r\ntype setStatusType = ReturnType<typeof setStatusAC>\r\ntype setErrorType = ReturnType<typeof setErrorAC>\r\n\r\ntype actionType = setStatusType | setErrorType\r\n\r\nexport const appReducer = (state: initialStateType = initialState, action: actionType) => {\r\n    switch (action.type) {\r\n        case \"SET_STATUS\":\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case \"SET_ERROR\":\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setStatusAC = (status: statusType) => {\r\n    return {type: 'SET_STATUS', status} as const\r\n}\r\nexport const setErrorAC = (error: string | null) => {\r\n    return {type: 'SET_ERROR', error} as const\r\n}\r\n","import {filterType, todoListsType} from \"../Components/ToDo/ToDo\";\r\nimport {v1} from \"uuid\";\r\nimport axios from \"axios\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setErrorAC, setStatusAC} from \"./App-reducer\";\r\n\r\nexport type addToDoType = {\r\n    type: 'ADD_TODO'\r\n    title: string\r\n    id: string\r\n}\r\ntype deleteToDoType = {\r\n    type: 'DELETE_TODO'\r\n    id: string\r\n}\r\ntype filterTaskType = {\r\n    type: 'FILTER_TASK'\r\n    todoID: string\r\n    filter: filterType\r\n}\r\nexport type setToDoType = {\r\n    type: 'SET_TODO'\r\n    newArray: Array<todoListsType>\r\n}\r\ntype changeToDoStatusType = ReturnType<typeof changeToDoStatusAC>\r\n\r\ntype actionType = addToDoType | deleteToDoType | filterTaskType | setToDoType | changeToDoStatusType\r\n\r\n\r\nconst initialState: Array<todoListsType> = []\r\n\r\nexport const ToDoListsReducer = (state: Array<todoListsType> = initialState, action: actionType) => {\r\n    switch (action.type) {\r\n        case \"SET_TODO\":\r\n            return action.newArray.map(el => {\r\n                return {\r\n                    ...el,\r\n                    filter: 'all',\r\n                    entityStatus: false\r\n                }\r\n            })\r\n        case \"ADD_TODO\":\r\n            let newToDo = {id: action.id, title: action.title, filter: 'all', entityStatus: false}\r\n            return [newToDo, ...state];\r\n        case \"DELETE_TODO\":\r\n            return state.filter(el => el.id !== action.id);\r\n        case \"FILTER_TASK\":\r\n            let filterTodoLists = state.find(el => el.id === action.todoID)\r\n            if (filterTodoLists) {\r\n                filterTodoLists.filter = action.filter\r\n            }\r\n            return [...state];\r\n        case \"CHANGE_TODO_STATUS\":\r\n            return state.map(el => {\r\n                if (el.id === action.todoID) {\r\n                    return {...el, entityStatus: action.status}\r\n                } else return el\r\n            })\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setToDoAC = (newArray: Array<todoListsType>): setToDoType => {\r\n    return {type: 'SET_TODO', newArray}\r\n}\r\nexport const addToDoAC = (title: string): addToDoType => {\r\n    return {type: 'ADD_TODO', title, id: v1()}\r\n}\r\nexport const deleteToDoAC = (id: string): deleteToDoType => {\r\n    return {type: 'DELETE_TODO', id}\r\n}\r\nexport const filterTaskAC = (todoID: string, filter: filterType): filterTaskType => {\r\n    return {type: 'FILTER_TASK', todoID, filter}\r\n}\r\nexport const changeToDoStatusAC = (todoID: string, status: boolean) => {\r\n    return {type: 'CHANGE_TODO_STATUS', todoID, status} as const\r\n}\r\n\r\nexport const setToDoThunk = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setStatusAC('loading'))\r\n        axios.get('https://social-network.samuraijs.com/api/1.1/todo-lists',\r\n            {\r\n                withCredentials: true,\r\n                headers: {\r\n                    'api-key': 'c2e39203-417e-4936-90ba-36cd8b9b6c99'\r\n                }\r\n            })\r\n            .then(res => {\r\n                dispatch(setToDoAC(res.data))\r\n                dispatch(setStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addToDoThunk = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setStatusAC('loading'))\r\n        axios.post('https://social-network.samuraijs.com/api/1.1/todo-lists', {title},\r\n            {\r\n                withCredentials: true,\r\n                headers: {\r\n                    'api-key': 'c2e39203-417e-4936-90ba-36cd8b9b6c99'\r\n                }\r\n            }).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(addToDoAC(title))\r\n                dispatch(setStatusAC('succeeded'))\r\n            } else {\r\n                if (response.data.messages.length) {\r\n                    dispatch(setErrorAC(response.data.messages[0]))\r\n                } else {\r\n                    dispatch(setErrorAC('Some error occurred'))\r\n                }\r\n                dispatch(setStatusAC('failed'))\r\n            }\r\n\r\n        })\r\n    }\r\n}\r\n\r\nexport const deleteToDoThunk = (id: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setStatusAC('loading'))\r\n        dispatch(changeToDoStatusAC(id, true))\r\n        axios.delete(`https://social-network.samuraijs.com/api/1.1//todo-lists/${id}`,\r\n            {\r\n                withCredentials: true,\r\n                headers: {\r\n                    'api-key': 'c2e39203-417e-4936-90ba-36cd8b9b6c99'\r\n                }\r\n            }).then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(deleteToDoAC(id))\r\n                dispatch(setStatusAC('succeeded'))\r\n                dispatch(changeToDoStatusAC(id, false))\r\n            }\r\n\r\n        })\r\n    }\r\n}","import {tasksType, taskType} from \"../Components/ToDo/ToDo\";\r\nimport {v1} from \"uuid\";\r\nimport {addToDoType, setToDoType} from \"./ToDoLists-Reducer\";\r\nimport axios from \"axios\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setErrorAC, setStatusAC} from \"./App-reducer\";\r\n\r\n\r\ntype addTaskType = ReturnType<typeof addTaskAC>\r\ntype deleteTaskType = ReturnType<typeof deleteTaskAC>\r\ntype changeCheckBoxType = ReturnType<typeof changeCheckBoxAC>\r\ntype changeTaskNameType = ReturnType<typeof changeTaskNameAC>\r\ntype setTasksType = ReturnType<typeof setTasksAC>\r\ntype changeTaskStatusType = ReturnType<typeof changeTaskStatusAC>\r\n\r\ntype actionType = addTaskType\r\n    | deleteTaskType\r\n    | changeCheckBoxType\r\n    | changeTaskNameType\r\n    | addToDoType\r\n    | setToDoType\r\n    | setTasksType\r\n    | changeTaskStatusType\r\n\r\nconst initialState: tasksType = {}\r\n\r\n\r\nexport const ToDoTaskReducer = (state: tasksType = initialState, action: actionType) => {\r\n    switch (action.type) {\r\n\r\n        case \"SET_TASKS\":\r\n            const stateCopy2 = {...state}\r\n            stateCopy2[action.todoID] = action.tasks\r\n            return stateCopy2\r\n\r\n        case \"SET_TODO\":\r\n            const stateCopy = {...state}\r\n            action.newArray.forEach(el => {\r\n                stateCopy[el.id] = []\r\n            })\r\n            return stateCopy\r\n\r\n        case \"ADD_TASK\":\r\n            state[action.todoID] = [{id: v1(), title: action.taskName, isDone: false, entityStatusTask:false}, ...state[action.todoID]]\r\n            return {...state};\r\n\r\n        case \"DELETE_TASK\":\r\n            const newTasks = state[action.todoID]\r\n            state[action.todoID] = newTasks.filter(el => el.id !== action.taskID)\r\n            return {...state};\r\n\r\n        case \"CHANGE_CHECK_BOX\":\r\n            return {\r\n                ...state,\r\n                [action.todoID]: state[action.todoID].map(el => {\r\n                    if (el.id === action.taskID) {\r\n                        return {...el, isDone: action.isDone}\r\n                    } else return el\r\n                })\r\n            };\r\n\r\n        case \"CHANGE_TASK_NAME\":\r\n            return {\r\n                ...state,\r\n                [action.todoID]: state[action.todoID].map(el => {\r\n                    if (el.id === action.taskID) {\r\n                        return {...el, title: action.taskName}\r\n                    } else return el\r\n                })\r\n            }\r\n\r\n        case \"ADD_TODO\":\r\n            return {...state, [action.id]: []};\r\n\r\n        case \"CHANGE_TASK_STATUS\":\r\n            return {\r\n                ...state,\r\n                [action.todoID]: state[action.todoID].map(el => {\r\n                    if (el.id === action.taskID) {\r\n                        return {...el, entityStatusTask:action.status}\r\n                    } else return el\r\n                })\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setTasksAC = (todoID: string, tasks: Array<taskType>) => {\r\n    return {type: 'SET_TASKS', todoID, tasks} as const\r\n}\r\nexport const addTaskAC = (todoID: string, taskName: string) => {\r\n    return {type: 'ADD_TASK', todoID, taskName} as const\r\n}\r\nexport const deleteTaskAC = (todoID: string, taskID: string) => {\r\n    return {type: 'DELETE_TASK', todoID, taskID} as const\r\n}\r\nexport const changeCheckBoxAC = (todoID: string, taskID: string, isDone: boolean) => {\r\n    return {type: 'CHANGE_CHECK_BOX', todoID, taskID, isDone} as const\r\n}\r\nexport const changeTaskNameAC = (todoID: string, taskID: string, taskName: string) => {\r\n    return {type: 'CHANGE_TASK_NAME', todoID, taskID, taskName} as const\r\n}\r\nexport const changeTaskStatusAC = (todoID: string, taskID: string, status: boolean) => {\r\n    return {type: 'CHANGE_TASK_STATUS', todoID, taskID, status} as const\r\n}\r\n\r\nexport const setTasksThunk = (todoID: string) => {\r\n    console.log('setTasksThunk')\r\n    return (dispatch: Dispatch) => {\r\n        axios.get(`https://social-network.samuraijs.com/api/1.1/todo-lists/${todoID}/tasks`,\r\n            {\r\n                withCredentials: true,\r\n                headers: {\r\n                    'api-key': 'c2e39203-417e-4936-90ba-36cd8b9b6c99'\r\n                }\r\n            }).then(response => {\r\n            dispatch(setTasksAC(todoID, response.data.items))\r\n        })\r\n\r\n    }\r\n}\r\n\r\nexport const addTaskThunk = (todoID: string, title: string) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setStatusAC('loading'))\r\n        axios.post(`https://social-network.samuraijs.com/api/1.1/todo-lists/${todoID}/tasks`, {title},\r\n            {\r\n                withCredentials: true,\r\n                headers: {\r\n                    'api-key': 'c2e39203-417e-4936-90ba-36cd8b9b6c99'\r\n                }\r\n            }).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(addTaskAC(todoID, title))\r\n                dispatch(setStatusAC('succeeded'))\r\n            } else {\r\n\r\n                    if (response.data.messages.length) {\r\n                        dispatch(setErrorAC(response.data.messages[0]))\r\n                    } else {\r\n                        dispatch(setErrorAC('Some error occurred'))\r\n                    }\r\n                    dispatch(setStatusAC('failed'))\r\n            }\r\n        })\r\n            .catch(error => {\r\n                dispatch(setErrorAC(error.message))\r\n                dispatch(setStatusAC('failed'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const deleteTaskThunk = (todoID: string, taskID: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setStatusAC('loading'))\r\n        dispatch(changeTaskStatusAC(todoID,taskID,true))\r\n        axios.delete(`https://social-network.samuraijs.com/api/1.1/todo-lists/${todoID}/tasks/${taskID}`,\r\n            {\r\n                withCredentials: true,\r\n                headers: {\r\n                    'api-key': 'c2e39203-417e-4936-90ba-36cd8b9b6c99'\r\n                }\r\n            }).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(deleteTaskAC(todoID, taskID))\r\n                dispatch(changeTaskStatusAC(todoID,taskID,false))\r\n                dispatch(setStatusAC('succeeded'))\r\n            }\r\n        })\r\n    }\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport axios from \"axios\";\r\nimport {setStatusAC} from \"./App-reducer\";\r\n\r\ntype photosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport type userItemType = {\r\n    id: number\r\n    name: string\r\n    status: string\r\n    photos: photosType\r\n    followed: boolean\r\n}\r\n\r\nexport type setCurrentPageType = ReturnType<typeof setCurrentPageAC>\r\nexport type setTotalType = ReturnType<typeof setTotalAC>\r\nexport type addUsersType = ReturnType<typeof setUsersAC>\r\nexport type followUserType = ReturnType<typeof followUserAC>\r\nexport type unfollowUserType = ReturnType<typeof unfollowUserAC>\r\n\r\ntype actionType = addUsersType | setTotalType | setCurrentPageType | followUserType | unfollowUserType\r\n\r\ntype initialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    users: [] as Array<userItemType>,\r\n    total: 0,\r\n    pageSize: 10,\r\n    currentPage: 1\r\n}\r\n\r\n\r\nexport const usersReducer = (state: initialStateType = initialState, action: actionType) => {\r\n\r\n    switch (action.type) {\r\n        case \"ADD_USERS\":\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            };\r\n        case \"SET_TOTAL\":\r\n            return {\r\n                ...state,\r\n                total: action.total\r\n            }\r\n        case \"SET_CURRENT_PAGE\":\r\n            return {\r\n                ...state,\r\n                currentPage: action.page\r\n            }\r\n        case \"FOLLOW_USER\":\r\n            return {\r\n                ...state,\r\n                users:state.users.map(el => {\r\n                    if (el.id === action.userId) {\r\n                       return {...el, followed:true}\r\n                    }\r\n                    return el\r\n                })\r\n            }\r\n        case \"UNFOLLOW_USER\":\r\n            return {\r\n                ...state,\r\n                users:state.users.map(el => {\r\n                    if (el.id === action.userId) {\r\n                        return {...el, followed:false}\r\n                    }\r\n                    return el\r\n                })\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setUsersAC = (users: Array<userItemType>) => {\r\n    return {type: 'ADD_USERS', users} as const\r\n}\r\nexport const setTotalAC = (total: number) => {\r\n    return {type: 'SET_TOTAL', total} as const\r\n}\r\nexport const setCurrentPageAC = (page: number) => {\r\n    return {type: 'SET_CURRENT_PAGE', page} as const\r\n}\r\nexport const followUserAC = (userId: number) => {\r\n    return {type: 'FOLLOW_USER', userId} as const\r\n}\r\nexport const unfollowUserAC = (userId: number) => {\r\n    return {type: 'UNFOLLOW_USER', userId} as const\r\n}\r\n\r\nexport const setUsersThunk = (pageSize: number, currentPage: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setStatusAC('loading'))\r\n        axios.get(` https://social-network.samuraijs.com/api/1.0/users?count=${pageSize}&page=${currentPage}`,\r\n            {\r\n                withCredentials: true,\r\n                headers: {\r\n                    'api-key': 'c2e39203-417e-4936-90ba-36cd8b9b6c99'\r\n                }\r\n            })\r\n            .then(response => {\r\n                dispatch(setUsersAC(response.data.items))\r\n                dispatch(setTotalAC(response.data.totalCount))\r\n                dispatch(setCurrentPageAC(currentPage))\r\n                dispatch(setStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const followUserThunk = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        axios.post(`https://social-network.samuraijs.com/api/1.0/follow/${userId}`,{},\r\n            {\r\n                withCredentials: true,\r\n                headers: {\r\n                    'api-key': 'c2e39203-417e-4936-90ba-36cd8b9b6c99'\r\n                }\r\n            }\r\n        ).then((response) => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(followUserAC(userId))\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const unfollowUserThunk = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        axios.delete(`https://social-network.samuraijs.com/api/1.0/follow/${userId}`,\r\n            {\r\n                withCredentials: true,\r\n                headers: {\r\n                    'api-key': 'c2e39203-417e-4936-90ba-36cd8b9b6c99'\r\n                }\r\n            }\r\n        ).then((response) => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(unfollowUserAC(userId))\r\n            }\r\n        })\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport axios from \"axios\";\r\n\r\n\r\ntype setAuthType = ReturnType<typeof setAuthAC>\r\n\r\ntype actionType = setAuthType\r\n\r\nconst initialState = {\r\n    id: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false\r\n}\r\n\r\ntype initialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: initialStateType = initialState, action: actionType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_AUTH\":\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setAuthAC = (id: number, email: string, login: string, isAuth: boolean) => {\r\n    return {type: 'SET_AUTH', data: {id, email, login, isAuth}} as const\r\n}\r\n\r\nexport const setAuthThunk = () => {\r\n    return async (dispatch: Dispatch) => {\r\n        const response = await axios.get(` https://social-network.samuraijs.com/api/1.0/auth/me`,\r\n            {\r\n                withCredentials: true,\r\n                headers: {\r\n                    'api-key': 'c2e39203-417e-4936-90ba-36cd8b9b6c99'\r\n                }\r\n            })\r\n        const {id, email, login} = response.data.data\r\n        dispatch(setAuthAC(id, email, login, true))\r\n    }\r\n}\r\n\r\nexport const loginThunk = (email:string, password:string) => {\r\n    return (dispatch:Dispatch) => {\r\n        axios.post('https://social-network.samuraijs.com/api/1.1/auth/login', {email,password},\r\n            {\r\n                withCredentials: true,\r\n                headers: {\r\n                    'api-key': 'c2e39203-417e-4936-90ba-36cd8b9b6c99'\r\n                }\r\n            }).then(response => {\r\n                if(response.data.resultCode === 0) {\r\n                    // @ts-ignore\r\n                    dispatch(setAuthThunk())\r\n                }\r\n        })\r\n    }\r\n}\r\n\r\nexport const logoutThunk = () => {\r\n    return (dispatch:Dispatch) => {\r\n        axios.delete('https://social-network.samuraijs.com/api/1.1/auth/login',\r\n            {\r\n                withCredentials: true,\r\n                headers: {\r\n                    'api-key': 'c2e39203-417e-4936-90ba-36cd8b9b6c99'\r\n                }\r\n            }).then(response => {\r\n            if(response.data.resultCode === 0) {\r\n                // @ts-ignore\r\n                dispatch(setAuthAC(null,null,null,false))\r\n            }\r\n        })\r\n    }\r\n}","import axios from \"axios\";\r\nimport {setErrorAC, setStatusAC} from \"./App-reducer\";\r\n\r\ntype contactsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\n\r\ntype photosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport type profileType = {\r\n    userId: number\r\n    aboutMe:string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: contactsType\r\n    photos: photosType\r\n\r\n}\r\n\r\ntype initialStateType = typeof initialState\r\n\r\ntype setProfileType = ReturnType<typeof setProfileAC>\r\n\r\ntype actionType = setProfileType\r\n\r\nconst initialState = {\r\n    profile: {} as profileType\r\n}\r\n\r\nexport const profileReducer = (state: initialStateType = initialState, action: actionType) => {\r\n    switch (action.type) {\r\n        case \"SET_PROFILE\":\r\n            return {\r\n                ...state,\r\n                profile: {...action.profile}\r\n            }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const setProfileAC = (profile: profileType) => {\r\n    return {type: 'SET_PROFILE', profile} as const\r\n}\r\n\r\nexport const setProfileThunk = (userID: number) => {\r\n    return (dispatch: any) => {\r\n        axios.get(` https://social-network.samuraijs.com/api/1.0/profile/${userID}`,\r\n            {\r\n                withCredentials: true,\r\n                headers: {\r\n                    'api-key': 'c2e39203-417e-4936-90ba-36cd8b9b6c99'\r\n                }\r\n            }).then(response => {\r\n            dispatch(setProfileAC(response.data))\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateProfileThunk = (profile: any) => {\r\n    return (dispatch:any, getState:any) => {\r\n        let userId = getState().auth.userId\r\n        axios.put(` https://social-network.samuraijs.com/api/1.0/profile`, {...profile},\r\n            {\r\n                withCredentials: true,\r\n                headers: {\r\n                    'api-key': 'c2e39203-417e-4936-90ba-36cd8b9b6c99'\r\n                }\r\n            }).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setProfileThunk(userId))\r\n            } else {\r\n                if (response.data.messages.length) {\r\n                    dispatch(setErrorAC(response.data.messages[0]))\r\n                } else {\r\n                    dispatch(setErrorAC('Some error occurred'))\r\n                }\r\n                dispatch(setStatusAC('failed'))\r\n            }\r\n        })\r\n    }\r\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"../Reducers/Counter-reducer\";\r\nimport {ToDoListsReducer} from \"../Reducers/ToDoLists-Reducer\";\r\nimport {ToDoTaskReducer} from \"../Reducers/ToDoTasks-Reducer\";\r\nimport {usersReducer} from \"../Reducers/Users-reducers\";\r\nimport thunk from 'redux-thunk';\r\nimport {appReducer} from \"../Reducers/App-reducer\";\r\nimport {authReducer} from \"../Reducers/Auth-reducer\";\r\nimport {profileReducer} from \"../Reducers/Profile-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer,\r\n    lists: ToDoListsReducer,\r\n    tasks: ToDoTaskReducer,\r\n    users: usersReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    profile: profileReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nstore.subscribe(() => {\r\n    localStorage.setItem('value', JSON.stringify(store.getState().counter.value))\r\n    localStorage.setItem('startValue', JSON.stringify(store.getState().counter.startValue))\r\n    localStorage.setItem('maxValue', JSON.stringify(store.getState().counter.maxValue))\r\n})","import React from \"react\";\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../State/Store\";\r\nimport {incValueAC, resetValueAC} from \"../../Reducers/Counter-reducer\";\r\n\r\n\r\nexport function Display() {\r\n\r\n    const value = useSelector<AppStateType, number>((state) => state.counter.value)\r\n    const maxValue = useSelector<AppStateType, number>((state => state.counter.maxValue))\r\n    const dispatch = useDispatch()\r\n\r\n    const style: any = {\r\n        color: 'red',\r\n        textAlign: 'center'\r\n    }\r\n\r\n    const onClickHandler = () => {\r\n\r\n        if (value !== maxValue) {\r\n            dispatch(incValueAC())\r\n        }\r\n    }\r\n    const resetOnClick = () => {\r\n        dispatch(resetValueAC())\r\n    }\r\n\r\n    const styleCard = {\r\n        backgroundColor: '#f3f2ef',\r\n        borderRadius: '15px',\r\n    }\r\n\r\n    return (\r\n        <Card elevation={2} style={styleCard}>\r\n            <CardActionArea>\r\n                <CardContent>\r\n                    <Typography variant='h3'>\r\n                        {\r\n                            value >= maxValue && maxValue !== 0 ? <h1 style={style}>{value}</h1> :\r\n                                <h1 style={{textAlign: 'center'}}>{value}</h1>\r\n                        }\r\n                    </Typography>\r\n                </CardContent>\r\n            </CardActionArea>\r\n            <CardActions>\r\n                <Button\r\n                    disabled={value === 0}\r\n                    style={{borderRadius: '15px'}}\r\n                    onClick={onClickHandler}\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    size=\"large\"\r\n                    startIcon={<AddIcon/>}>\r\n                    INC\r\n                </Button>\r\n                <Button\r\n                    disabled={value === 0}\r\n                    style={{borderRadius: '15px'}}\r\n                    onClick={resetOnClick}\r\n                    variant=\"outlined\"\r\n                    color=\"secondary\"\r\n                    size=\"large\"\r\n                    startIcon={<RotateLeftIcon/>}>\r\n                    RESET\r\n                </Button>\r\n            </CardActions>\r\n        </Card>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent} from 'react'\r\nimport {TextField} from \"@material-ui/core\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../State/Store\";\r\nimport {setMaxValueAC, setStartValueAC} from \"../../Reducers/Counter-reducer\";\r\n\r\n\r\nexport function InputComponent() {\r\n\r\n    const startValue = useSelector<AppStateType, number>((state => state.counter.startValue))\r\n    const maxValue = useSelector<AppStateType, number>((state => state.counter.maxValue))\r\n    const dispatch = useDispatch()\r\n\r\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setMaxValueAC(parseFloat(e.currentTarget.value)))\r\n    }\r\n    const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setStartValueAC(parseFloat(e.currentTarget.value)))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{display:'flex', flexDirection:'column'}}>\r\n                <TextField\r\n                    id=\"outlined-number\"\r\n                    label=\"Max value\"\r\n                    type=\"number\"\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    onChange={onChangeMaxValue}\r\n                    value={maxValue}\r\n                />\r\n                <TextField\r\n                    style={{marginTop: '10px'}}\r\n                    id=\"outlined-number\"\r\n                    label=\"Start value\"\r\n                    type=\"number\"\r\n                    InputLabelProps={{\r\n                        shrink: true,\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    onChange={onChangeStartValue}\r\n                    value={startValue}\r\n                />\r\n            </div>\r\n        </>\r\n    )\r\n}","import CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport React from \"react\";\r\nimport {InputComponent} from \"./InputComponent\";\r\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setValueAC} from \"../../Reducers/Counter-reducer\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\n\r\n\r\nexport function DisplayWithInput() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onSetValuesFromStorage = () => {\r\n\r\n        let value = localStorage.getItem('startValue')\r\n        if (value) {\r\n            let valueAsNumber = JSON.parse(value)\r\n            dispatch(setValueAC(valueAsNumber))\r\n        }\r\n    }\r\n\r\n    const styleCard = {\r\n        backgroundColor: '#f3f2ef',\r\n        borderRadius: '15px',\r\n    }\r\n\r\n    return (\r\n        <Card elevation={2} style={styleCard}>\r\n            <CardHeader title='Counter'/>\r\n            <CardContent>\r\n                <InputComponent/>\r\n            </CardContent>\r\n            <CardActions>\r\n                <Button\r\n                    style={{borderRadius: '15px'}}\r\n                    onClick={onSetValuesFromStorage}\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    size=\"large\"\r\n                    startIcon={<SaveAltIcon/>}>\r\n                    Save\r\n                </Button>\r\n            </CardActions>\r\n        </Card>\r\n    )\r\n}","import React from 'react';\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {Display} from \"./Display\";\r\nimport {DisplayWithInput} from \"./DisplayWithInput\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../State/Store\";\r\n\r\n\r\n\r\nexport function Counter() {\r\n\r\n\r\n    const login = useSelector<AppStateType, string | null>((state) => state.auth.login)\r\n\r\n    if(!login) {\r\n        return <Redirect to=\"/login\" />\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={3} justify=\"center\" style={{margin:'20px'}}>\r\n            <Grid item>\r\n                <Display/>\r\n            </Grid>\r\n            <Grid item>\r\n                <DisplayWithInput/>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}","export default __webpack_public_path__ + \"static/media/atom.64448b2b.png\";","import React, {useEffect} from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../State/Store\";\r\nimport {profileType, setProfileThunk} from \"../../Reducers/Profile-reducer\";\r\nimport ava from './../../Images/atom.png'\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport WorkOutlineIcon from \"@material-ui/icons/WorkOutline\";\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\nimport HttpIcon from '@material-ui/icons/Http';\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\nimport PlaylistAddCheckIcon from '@material-ui/icons/PlaylistAddCheck';\r\n\r\ntype propsType = {\r\n    id: string\r\n}\r\n\r\nexport function MyProfile(props: propsType) {\r\n\r\n    const meID = useSelector<AppStateType, number>((state) => state.auth.id!)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        props.id ? dispatch(setProfileThunk(+props.id)) : dispatch(setProfileThunk(meID))\r\n    }, [props.id, meID])\r\n\r\n    const userName = useSelector<AppStateType, string>((state) => state.profile.profile.fullName)\r\n    const userProfile = useSelector<AppStateType, profileType>((state) => state.profile.profile)\r\n\r\n    return (\r\n\r\n        <Grid container spacing={2}>\r\n\r\n            <Grid item xs={12}>\r\n                <Card elevation={2} style={{borderRadius: '20px', backgroundColor: '#f3f2ef'}}>\r\n                    <CardHeader\r\n                        avatar={\r\n                            <Avatar\r\n                                style={{height: '100px', width: '100px'}}\r\n                                aria-label=\"recipe\"\r\n                                src={userProfile\r\n                                    ? userProfile.photos?.large\r\n                                    : ava}/>\r\n                        }\r\n                        title={userName}\r\n                        subheader={userProfile.aboutMe}\r\n                    />\r\n                    <CardContent>\r\n                        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                            Имею опыт создания веб-приложений со стеком React-Redux-TypeScript.\r\n                            Открыт для ваших предложений.\r\n                            <IconButton aria-label=\"settings\">\r\n                                <CreateIcon/>\r\n                            </IconButton>\r\n                        </Typography>\r\n                        <Typography>\r\n                            <div style={{display: 'flex'}}>\r\n                                <WorkOutlineIcon/>\r\n                                &nbsp;\r\n                                &nbsp;\r\n                                <span>Open to work :</span>\r\n                                &nbsp;\r\n                                <span>{userProfile.lookingForAJob ? <DoneIcon/> : <ClearIcon/>}</span>\r\n                            </div>\r\n                        </Typography>\r\n                        <div style={{display: 'flex'}}>\r\n                            <span><PlaylistAddCheckIcon/></span>\r\n                            &nbsp;\r\n                            &nbsp;\r\n                            <Typography>\r\n                                Skills: {userProfile.lookingForAJobDescription}\r\n                            </Typography>\r\n                        </div>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n                <Card elevation={2} style={{borderRadius: '20px', backgroundColor: '#f3f2ef'}}>\r\n                    <CardHeader title='Contacts'/>\r\n                    <List>\r\n                        <ListItem alignItems=\"flex-start\">\r\n                            <ListItemAvatar>\r\n                                <GitHubIcon/>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary=\r\n                                    {userProfile.contacts?.github\r\n                                        ? <a href={userProfile.contacts.github}>www.github.com</a>\r\n                                        : \"GitHub\"}\r\n                            />\r\n                        </ListItem>\r\n                        <Divider variant=\"inset\" component=\"li\"/>\r\n                        <ListItem alignItems=\"flex-start\">\r\n                            <ListItemAvatar>\r\n                                <LinkedInIcon/>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary=\r\n                                    {userProfile.contacts?.github\r\n                                        ?\r\n                                        <a href={'https://www.linkedin.com/in/victor-demin-react/'}>www.linkedin.com</a>\r\n                                        : \"LinkedIn\"}\r\n                            />\r\n                        </ListItem>\r\n                        <Divider variant=\"inset\" component=\"li\"/>\r\n                        <ListItem alignItems=\"flex-start\">\r\n                            <ListItemAvatar>\r\n                                <HttpIcon/>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={userProfile.contacts?.github\r\n                                    ? <a href={userProfile.contacts.website}>www.website.com</a>\r\n                                    : \"WebSite\"}\r\n                            />\r\n                        </ListItem>\r\n                        <Divider variant=\"inset\" component=\"li\"/>\r\n                        <ListItem alignItems=\"flex-start\">\r\n                            <ListItemAvatar>\r\n                                <FacebookIcon/>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={userProfile.contacts?.github\r\n                                    ? <a href={'https://ru-ru.facebook.com/'}>www.facebook.com</a>\r\n                                    : \"Facebook\"}\r\n                            />\r\n                        </ListItem>\r\n                        <Divider variant=\"inset\" component=\"li\"/>\r\n                    </List>\r\n                </Card>\r\n            </Grid>\r\n\r\n        </Grid>\r\n\r\n    )\r\n}\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\r\nimport Card from \"@material-ui/core/Card\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport {v1} from \"uuid\";\r\n\r\n\r\ntype postType = {\r\n    id: string\r\n    name: string\r\n    message: string\r\n}\r\n\r\nexport function Posts() {\r\n\r\n    const [posts, setPosts] = useState<Array<postType>>([\r\n        {\r\n            id: '1',\r\n            name: 'Mosher’s Law of Software Engineering',\r\n            message: ' Не волнуйтесь, если что-то не работает. Если бы всё работало, вас бы уволили.',\r\n        },\r\n        {\r\n            id: '2',\r\n            name: 'Larry Wall',\r\n            message: 'Многие из вас знакомы с достоинствами программиста. Их всего три, и разумеется это: лень, нетерпеливость и гордыня.',\r\n        },\r\n        {\r\n            id: '3',\r\n            name: 'Martin Golding',\r\n            message: 'Всегда пишите код так, будто сопровождать его будет склонный к насилию психопат, который знает, где вы живете.',\r\n        },\r\n        {\r\n            id: '4',\r\n            name: 'Jazzwant',\r\n            message: 'Программирование — это разбиение чего-то большого и невозможного на что-то маленькое и вполне реальное.',\r\n        },\r\n    ])\r\n    const [newPost, setNewPost] = useState('')\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewPost(e.currentTarget.value)\r\n    }\r\n    const addPost = (message: string) => {\r\n        let post = {id: v1(), name: 'UserName', message: message, data: '20.20.2021'}\r\n        setPosts([post, ...posts])\r\n        setNewPost('')\r\n    }\r\n    const deletePost = (id:string) => {\r\n        setPosts(posts.filter(el => el.id !== id))\r\n    }\r\n\r\n    return (\r\n        <Card elevation={2} style={{borderRadius: '20px', backgroundColor: '#f3f2ef'}}>\r\n            <div style={{padding: '10px 10px 10px 10px'}}>\r\n                <TextField\r\n                    onChange={onChangeHandler}\r\n                    value={newPost}\r\n                    label=\"Add post\"\r\n                    InputProps={{\r\n                        startAdornment: (\r\n                            <InputAdornment position=\"start\">\r\n                                <MailOutlineIcon/>\r\n                            </InputAdornment>\r\n                        ),\r\n                    }}\r\n                />\r\n                <IconButton onClick={() => addPost(newPost)}>\r\n                    <SendIcon fontSize=\"large\"/>\r\n                </IconButton>\r\n            </div>\r\n\r\n            {\r\n                posts.map(el => {\r\n                    return (\r\n                        <List>\r\n                            <ListItem alignItems=\"flex-start\">\r\n                                <ListItemAvatar>\r\n                                    <Avatar alt={el.name} src=\"/static/images/avatar/1.jpg\"/>\r\n                                </ListItemAvatar>\r\n                                <div style={{display:'flex'}}>\r\n                                    <ListItemText\r\n                                        primary={el.name}\r\n                                        secondary={\r\n                                            <React.Fragment>\r\n                                                <Typography\r\n                                                    component=\"span\"\r\n                                                    variant=\"body2\"\r\n                                                    color=\"textPrimary\"\r\n                                                >\r\n                                                </Typography>\r\n                                                {el.message}\r\n                                            </React.Fragment>\r\n                                        }\r\n                                    />\r\n                                    <IconButton style={{justifyContent:'end'}} onClick={() => {deletePost(el.id)}}>\r\n                                        <ClearIcon/>\r\n                                    </IconButton>\r\n                                </div>\r\n                            </ListItem>\r\n                            <Divider variant=\"inset\" component=\"li\"/>\r\n                        </List>\r\n                    )\r\n                })\r\n            }\r\n        </Card>\r\n    );\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {MyProfile} from \"./MyProfile\";\r\nimport {Posts} from \"./Posts\";\r\nimport {Redirect, useParams} from 'react-router-dom';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../State/Store\";\r\n\r\ntype paramsType = {\r\n    userID:string\r\n}\r\n\r\nexport function Profile() {\r\n\r\n    const {userID} = useParams<paramsType>()\r\n\r\n    const login = useSelector<AppStateType, string | null>((state) => state.auth.login)\r\n\r\n    if (!login) {\r\n        return <Redirect to=\"/login\"/>\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={5} style={{margin: '20px'}}>\r\n            <Grid xs={12} lg={6} item>\r\n                <MyProfile id={userID}/>\r\n            </Grid>\r\n            <Grid xs={12} lg={6} item>\r\n                <Posts/>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}","import React from 'react'\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport PersonAddDisabledIcon from \"@material-ui/icons/PersonAddDisabled\";\r\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\";\r\nimport ava from './../../Images/atom.png'\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport List from \"@material-ui/core/List\";\r\nimport {NavLink} from 'react-router-dom';\r\nimport {followUserThunk, unfollowUserThunk} from \"../../Reducers/Users-reducers\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\ntype propsType = {\r\n    name: string\r\n    status: string\r\n    photo: string\r\n    id: number\r\n    followed:boolean\r\n}\r\n\r\n\r\nexport function User(props: propsType) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <>\r\n            <List key={props.id}>\r\n                <ListItem alignItems=\"flex-start\">\r\n                    <ListItemAvatar>\r\n                        <NavLink to={'profile/' + props.id}>\r\n                            <Avatar alt=\"Remy Sharp\"\r\n                                    src={props.photo ? props.photo : ava}\r\n                                    style={{width: '50px', height: '50px'}}\r\n                            />\r\n                        </NavLink>\r\n                    </ListItemAvatar>\r\n                    <ListItemText\r\n                        primary={props.name}\r\n                        secondary={\r\n                            <React.Fragment>\r\n                                <Typography\r\n                                    component=\"span\"\r\n                                    variant=\"body2\"\r\n                                    color=\"textPrimary\"\r\n                                >\r\n                                    Status:\r\n                                </Typography>\r\n                                {props.status}\r\n                            </React.Fragment>\r\n                        }\r\n                    />\r\n                    <IconButton onClick={() => dispatch(followUserThunk(props.id))}>\r\n                        <PersonAddIcon/>\r\n                    </IconButton>\r\n                    <IconButton onClick={() => dispatch(unfollowUserThunk(props.id))}>\r\n                        <PersonAddDisabledIcon/>\r\n                    </IconButton>\r\n                </ListItem>\r\n                <Divider variant=\"inset\" component=\"li\"/>\r\n            </List>\r\n        </>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport Card from \"@material-ui/core/Card\";\r\nimport {User} from \"./User\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setUsersThunk, userItemType} from \"../../Reducers/Users-reducers\";\r\nimport {AppStateType} from \"../../State/Store\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport {statusType} from \"../../Reducers/App-reducer\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {ErrorSnackbar} from \"../Utils/Error-Component\";\r\n\r\n\r\nexport function Users() {\r\n\r\n    const dispatch = useDispatch()\r\n    const users = useSelector<AppStateType, Array<userItemType>>((state) => state.users.users)\r\n    const pageSize = useSelector<AppStateType, number>((state) => state.users.pageSize)\r\n    const currentPage = useSelector<AppStateType, number>((state) => state.users.currentPage)\r\n    const total = useSelector<AppStateType, number>((state) => state.users.total)\r\n    const loading = useSelector<AppStateType, statusType>(state => state.app.status)\r\n\r\n    useEffect(() => {\r\n        dispatch(setUsersThunk(pageSize, currentPage))\r\n    }, [])\r\n\r\n    const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {\r\n        dispatch(setUsersThunk(pageSize, value))\r\n    };\r\n\r\n    const login = useSelector<AppStateType, string | null>((state) => state.auth.login)\r\n\r\n    if (!login) {\r\n        return <Redirect to=\"/login\"/>\r\n    }\r\n\r\n    const styleCard = {\r\n        backgroundColor: '#f3f2ef',\r\n        borderRadius: '15px',\r\n        margin: '10px'\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12}>\r\n            {loading === 'loading' && <LinearProgress/>}\r\n\r\n            <Pagination count={total} variant=\"outlined\" shape=\"rounded\" page={currentPage}\r\n                        onChange={handleChange} style={{padding: '10px'}}/>\r\n\r\n            <Card elevation={2} style={styleCard}>\r\n                {\r\n                    users.map(el => {\r\n                        return <User name={el.name} status={el.status}\r\n                                     photo={el.photos.large} id={el.id} followed={el.followed}/>\r\n                    })\r\n                }\r\n            </Card>\r\n\r\n            <Pagination count={total} variant=\"outlined\" shape=\"rounded\" page={currentPage}\r\n                        onChange={handleChange} style={{padding: '10px'}}/>\r\n        </Grid>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/welcome.05eb5518.jpg\";","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginThunk} from \"../../Reducers/Auth-reducer\";\r\nimport img from './../../Images/welcome.jpg'\r\nimport {AppStateType} from \"../../State/Store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nexport const SignupForm = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginThunk(values.email, values.password))\r\n        },\r\n    });\r\n\r\n    // @ts-ignore\r\n    const login = useSelector<AppStateType, string>((state) => state.auth.login)\r\n\r\n    if(login) {\r\n        return <Redirect to=\"/profile\" />\r\n    }\r\n\r\n    return (\r\n        <Grid container justify=\"center\" spacing={2} >\r\n            <Grid item xs={12} lg={6}>\r\n                    <img src={img} style={{maxWidth:'100%'}}/>\r\n            </Grid>\r\n            <Grid item xs={12} lg={4}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl style={{marginLeft:'20px'}}>\r\n                        <FormLabel>\r\n                            <p>To log in get registered{' '}\r\n                                <a href={'https://social-network.samuraijs.com/'}\r\n                                   target={'_blank'}>here\r\n                                </a>\r\n                            </p>\r\n                            <p>or use common test account credentials:</p>\r\n                            <p>Email: free@samuraijs.com</p>\r\n                            <p>Password: free</p>\r\n                        </FormLabel>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('email')}\r\n                            />\r\n                            <TextField\r\n                                type=\"password\"\r\n                                label=\"Password\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('password')}\r\n                            />\r\n                            <FormControlLabel\r\n                                label={'Remember me'}\r\n                                control={<Checkbox/>}\r\n                            />\r\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n\r\n    );\r\n};","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../State/Store\";\r\nimport {setErrorAC} from \"../../Reducers/App-reducer\";\r\n\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const open = useSelector<AppStateType,string | null>((state) => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n       dispatch(setErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={open !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {open}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport {updateProfileThunk} from \"../../Reducers/Profile-reducer\";\r\nimport {ErrorSnackbar} from \"../Utils/Error-Component\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../State/Store\";\r\n\r\n\r\ntype contactsType = {\r\n    github: string\r\n    facebook: string\r\n    website: string\r\n}\r\n\r\ntype valuesType = {\r\n    aboutMe: string\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: contactsType\r\n}\r\n\r\nexport const Settings = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const login = useSelector<AppStateType, string | null>((state) => state.auth.login)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            aboutMe: '',\r\n            lookingForAJobDescription: '',\r\n            fullName: '',\r\n            contacts: {\r\n                github: '',\r\n                facebook: '',\r\n                website: '',\r\n            }\r\n        },\r\n        onSubmit: (values: valuesType) => {\r\n            console.log(values)\r\n            dispatch(updateProfileThunk(values))\r\n            formik.resetForm()\r\n        },\r\n    });\r\n\r\n    if (!login) {\r\n        return <Redirect to=\"/login\"/>\r\n    }\r\n\r\n    return (\r\n        <Grid container justify=\"center\">\r\n            <ErrorSnackbar/>\r\n            <Grid item xs={12} lg={5}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl fullWidth>\r\n                        <FormLabel>\r\n                            <h2>Change description</h2>\r\n                        </FormLabel>\r\n                        <Card\r\n                            style={{\r\n                                margin:'10px',\r\n                                padding: '20px',\r\n                                marginBottom: '10px',\r\n                                borderRadius: '20px',\r\n                                backgroundColor: '#f3f2ef'\r\n                            }}\r\n                            elevation={2}>\r\n                            <FormGroup>\r\n                                <FormControlLabel\r\n                                    label={'Looking for a job'}\r\n                                    control={<Checkbox/>}\r\n                                    onChange={formik.handleChange}\r\n                                />\r\n                                <TextField\r\n                                    size='small'\r\n                                    label=\"about me\"\r\n                                    margin=\"normal\"\r\n                                    name=\"aboutMe\"\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.aboutMe}\r\n                                />\r\n                                <TextField\r\n                                    size='small'\r\n                                    label=\"skills\"\r\n                                    margin=\"normal\"\r\n                                    name=\"lookingForAJobDescription\"\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.lookingForAJobDescription}\r\n                                />\r\n                                <TextField\r\n                                    size='small'\r\n                                    label=\"name\"\r\n                                    margin=\"normal\"\r\n                                    name=\"fullName\"\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.fullName}\r\n                                />\r\n                                <TextField\r\n                                    size='small'\r\n                                    label=\"github\"\r\n                                    margin=\"normal\"\r\n                                    name=\"contacts.github\"\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.contacts.github}\r\n                                />\r\n                                <TextField\r\n                                    size='small'\r\n                                    label=\"facebook\"\r\n                                    margin=\"normal\"\r\n                                    name=\"contacts.facebook\"\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.contacts.facebook}\r\n                                />\r\n                                <TextField\r\n                                    size='small'\r\n                                    label=\"website\"\r\n                                    margin=\"normal\"\r\n                                    name=\"contacts.website\"\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.contacts.website}\r\n                                />\r\n                                <Button size={\"medium\"} type={'submit'} variant={'outlined'}\r\n                                        color={'primary'}>Save</Button>\r\n                            </FormGroup>\r\n                        </Card>\r\n                    </FormControl>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n\r\n    );\r\n};","import React, {ChangeEvent, useCallback, useState} from \"react\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormatListNumberedIcon from '@material-ui/icons/FormatListNumbered';\r\nimport LibraryAddIcon from '@material-ui/icons/LibraryAdd';\r\n\r\n\r\ntype propsType = {\r\n    addToDo: (title: string) => void\r\n}\r\n\r\nexport const MultiInput = React.memo((props:propsType) => {\r\n\r\n    const [toDo, setToDo] = useState('')\r\n\r\n    const addToDo = useCallback(() => {\r\n\r\n        props.addToDo(toDo)\r\n        setToDo('')\r\n    },[props.addToDo,toDo])\r\n\r\n    const onChangeToDo = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setToDo(e.currentTarget.value)\r\n\r\n    }\r\n\r\n    return (\r\n        <div style={{margin:'10px'}}>\r\n            <TextField\r\n                onChange={onChangeToDo}\r\n                value={toDo}\r\n                label=\"Add ToDo-List\"\r\n                InputProps={{\r\n                    startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                            <FormatListNumberedIcon />\r\n                        </InputAdornment>\r\n                    ),\r\n                }}\r\n            />\r\n            <IconButton aria-label=\"delete\" onClick={addToDo}>\r\n                <LibraryAddIcon fontSize=\"large\"/>\r\n            </IconButton>\r\n\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState} from 'react'\r\n\r\ntype propsType = {\r\n    value:string\r\n    changeTaskName:(taskName:string) => void\r\n}\r\n\r\nexport const EditableSpan = (props:propsType) => {\r\n    console.log('SPAN')\r\n    const [editMode, setEditMode] = useState(true)\r\n    const [title, setTitle] = useState(props.value)\r\n\r\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onBlueHandler = () => {\r\n        props.changeTaskName(title)\r\n        setEditMode(true)\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            {\r\n                editMode\r\n                    ? <span onDoubleClick={() => setEditMode(false)}>{props.value}</span>\r\n                    : <input value = {title} autoFocus onChange={onChangeHandler} onBlur={onBlueHandler} />\r\n            }\r\n\r\n        </>\r\n    )\r\n}","import React, {ChangeEvent, useCallback, useEffect, useState} from \"react\";\r\nimport {filterType, taskType} from \"./ToDo\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport PlaylistAddIcon from '@material-ui/icons/PlaylistAdd';\r\nimport Delete from \"@material-ui/icons/Delete\";\r\nimport {EditableSpan} from \"./Editable-Span\";\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport {setTasksThunk} from \"../../Reducers/ToDoTasks-Reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype propsType = {\r\n    filter:filterType\r\n    tasks: Array<taskType>\r\n    title: string\r\n    id: string\r\n    addTask: (todoID: string, taskName: string) => void\r\n    deleteTask: (todoID: string, taskID: string) => void\r\n    filterTask: (todoID: string, filter: filterType) => void\r\n    changeCheckBox: (todoID: string, taskID: string, isDone: boolean) => void\r\n    changeTaskName: (todoID: string, taskID: string, taskName: string) => void\r\n    deleteToDo:(id:string) => void\r\n    entityStatus:boolean\r\n}\r\n\r\n export const ToDoList = React.memo((props: propsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setTasksThunk(props.id))\r\n    },[dispatch])\r\n\r\n    const [taskName, setTaskName] = useState('')\r\n    const [error, setError] = useState('')\r\n\r\n    const onAddTask = useCallback(() => {\r\n        if (taskName.trim() !== '') {\r\n            props.addTask(props.id, taskName)\r\n            setTaskName('')\r\n            setError('')\r\n        } else setError('Incorrect entry.')\r\n    },[ props.addTask,props.id,taskName])\r\n\r\n    const taskOnChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTaskName(e.currentTarget.value)\r\n    }\r\n\r\n    let filterTasks = props.tasks\r\n    if (props.filter === 'active') {\r\n        filterTasks = filterTasks.filter(t => !t.isDone)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        filterTasks = filterTasks.filter(t => t.isDone)\r\n    }\r\n\r\n     const styleCard = {\r\n         backgroundColor:'#f3f2ef',\r\n         borderRadius:'15px',\r\n         padding:'10px'\r\n     }\r\n\r\n    return (\r\n        <Paper elevation={3} style={styleCard}>\r\n\r\n            <h3>\r\n                {props.title ? `${props.title}` : 'ToDo'}\r\n                <IconButton onClick={() => props.deleteToDo(props.id)} disabled={props.entityStatus}>\r\n                    <HighlightOffIcon/>\r\n                </IconButton>\r\n            </h3>\r\n\r\n            <TextField\r\n                size='small'\r\n                error={!!error}\r\n                label=\"Add task\"\r\n                variant=\"outlined\"\r\n                onChange={taskOnChange}\r\n                value={taskName}\r\n                helperText={error}\r\n            />\r\n\r\n            <IconButton onClick={onAddTask}>\r\n                <PlaylistAddIcon/>\r\n            </IconButton>\r\n\r\n            {\r\n                filterTasks.map(el => {\r\n\r\n                    let onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n                        props.changeCheckBox(props.id, el.id, e.currentTarget.checked)\r\n                    }\r\n                    const onchangeTaskName = (taskName: string) => {\r\n                        props.changeTaskName(props.id, el.id, taskName)\r\n                    }\r\n\r\n                    return (\r\n                        <div>\r\n\r\n                            <Checkbox\r\n                                checked={el.isDone}\r\n                                onChange={onChangeHandler}\r\n                                inputProps={{'aria-label': 'primary checkbox'}}\r\n                            />\r\n                            {' '}\r\n                            <EditableSpan value={el.title} changeTaskName={onchangeTaskName}/>\r\n                            <IconButton aria-label=\"delete\" onClick={() => props.deleteTask(props.id, el.id)}\r\n                                        disabled={el.entityStatusTask}>\r\n                                <Delete/>\r\n                            </IconButton>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n            <div>\r\n                <ButtonGroup variant=\"text\" color=\"primary\" aria-label=\"text primary button group\">\r\n                    <Button onClick={() => props.filterTask(props.id, 'all')}>All</Button>\r\n                    <Button onClick={() => props.filterTask(props.id, 'active')}>Active</Button>\r\n                    <Button onClick={() => props.filterTask(props.id, 'completed')}>Completed</Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </Paper>\r\n    )\r\n})\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {MultiInput} from \"./Multi-Input\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport LinearProgress from '@material-ui/core/LinearProgress'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../State/Store\";\r\nimport {\r\n    addToDoThunk,\r\n    deleteToDoThunk,\r\n    filterTaskAC,\r\n    setToDoThunk\r\n} from \"../../Reducers/ToDoLists-Reducer\";\r\nimport {\r\n    addTaskThunk,\r\n    changeCheckBoxAC,\r\n    changeTaskNameAC,\r\n    deleteTaskThunk\r\n} from \"../../Reducers/ToDoTasks-Reducer\";\r\nimport {statusType} from \"../../Reducers/App-reducer\";\r\nimport {ErrorSnackbar} from \"../Utils/Error-Component\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {ToDoList} from \"./ToDo-List\";\r\n\r\n\r\nexport type todoListsType = {\r\n    id: string\r\n    title: string\r\n    filter: filterType\r\n    entityStatus: boolean\r\n}\r\nexport type taskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n    entityStatusTask:boolean\r\n}\r\nexport type tasksType = {\r\n    [key: string]: Array<taskType>\r\n}\r\nexport type filterType = 'all' | 'active' | 'completed'\r\n\r\nexport function ToDo() {\r\n\r\n    const todoLists = useSelector<AppStateType,Array<todoListsType>>(state => state.lists)\r\n    const tasks = useSelector<AppStateType,tasksType>(state => state.tasks)\r\n    const loading = useSelector<AppStateType,statusType>(state => state.app.status)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setToDoThunk())\r\n    }, [])\r\n\r\n    const addToDo = useCallback((title: string) => {\r\n        dispatch(addToDoThunk(title))\r\n    },[dispatch])\r\n\r\n    const deleteToDo = useCallback( (id: string) => {\r\n        dispatch(deleteToDoThunk(id))\r\n    },[dispatch])\r\n\r\n    const addTask = useCallback((todoID: string, taskName: string) => {\r\n        dispatch(addTaskThunk(todoID,taskName))\r\n    },[dispatch])\r\n\r\n    const deleteTask = useCallback((todoID: string, taskID: string) => {\r\n        dispatch(deleteTaskThunk(todoID,taskID))\r\n    }, [dispatch])\r\n\r\n    const filterTask = useCallback((todoID: string, filter: filterType) => {\r\n        dispatch(filterTaskAC(todoID,filter))\r\n    },[dispatch])\r\n\r\n    const changeCheckBox = useCallback((todoID: string, taskID: string, isDone: boolean) => {\r\n        dispatch(changeCheckBoxAC(todoID,taskID,isDone))\r\n    },[dispatch])\r\n\r\n    const changeTaskName = useCallback((todoID: string, taskID: string, taskName: string) => {\r\n        dispatch(changeTaskNameAC(todoID,taskID,taskName))\r\n    },[dispatch])\r\n\r\n    const login = useSelector<AppStateType, string | null>((state) => state.auth.login)\r\n\r\n    if(!login) {\r\n        return <Redirect to=\"/login\" />\r\n    }\r\n\r\n    return (\r\n\r\n        <div style={{margin:'30px'}}>\r\n            {loading === 'loading' && <LinearProgress/>}\r\n\r\n            <ErrorSnackbar/>\r\n\r\n            <Grid container>\r\n                <MultiInput addToDo={addToDo}/>\r\n            </Grid>\r\n\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todoLists.map(el => {\r\n\r\n                            return (\r\n                                <Grid item>\r\n                                    <ToDoList\r\n                                        filter={el.filter}\r\n                                        key={el.id}\r\n                                        tasks={tasks[el.id]}\r\n                                        title={el.title}\r\n                                        id={el.id}\r\n                                        entityStatus = {el.entityStatus}\r\n                                        addTask={addTask}\r\n                                        deleteTask={deleteTask}\r\n                                        filterTask={filterTask}\r\n                                        changeCheckBox={changeCheckBox}\r\n                                        changeTaskName={changeTaskName}\r\n                                        deleteToDo={deleteToDo}\r\n                                    />\r\n                                </Grid>\r\n                            )\r\n                        }\r\n                    )\r\n                }\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {NavLink, Route} from 'react-router-dom';\r\nimport AlarmIcon from '@material-ui/icons/Alarm';\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport FormatListNumberedIcon from '@material-ui/icons/FormatListNumbered';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport {Counter} from \"./Components/Counter/Counter\";\r\nimport {Profile} from \"./Components/Profile/Profile\";\r\nimport {Users} from \"./Components/Users/Users\";\r\nimport {SignupForm} from \"./Components/Login/Formik-login\";\r\nimport {logoutThunk, setAuthThunk} from \"./Reducers/Auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {Settings} from \"./Components/Settings/Settings\";\r\nimport {AppStateType} from \"./State/Store\";\r\nimport {ToDo} from \"./Components/ToDo/ToDo\";\r\n\r\n\r\nexport function App() {\r\n\r\n    const dispatch = useDispatch()\r\n    const login = useSelector<AppStateType, string | null>((state) => state.auth.login)\r\n\r\n    useEffect(() => {\r\n        dispatch(setAuthThunk())\r\n    }, [])\r\n\r\n    const logoutHandle = () => {\r\n        dispatch(logoutThunk())\r\n    }\r\n\r\n    return (\r\n        <Grid container style={{flexGrow: 1}}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" style={{flexGrow: 1}}>\r\n                        <NavLink to='/counter' style={{textDecoration: 'none'}}>\r\n                            <IconButton><AlarmIcon/></IconButton>\r\n                        </NavLink>\r\n                        <NavLink to='/users' style={{textDecoration: 'none'}}>\r\n                            <IconButton><GroupAddIcon/></IconButton>\r\n                        </NavLink>\r\n                        <NavLink to='/profile' style={{textDecoration: 'none'}}>\r\n                            <IconButton><PersonIcon/></IconButton>\r\n                        </NavLink>\r\n                        <NavLink to='/todo' style={{textDecoration: 'none'}}>\r\n                            <IconButton><FormatListNumberedIcon/></IconButton>\r\n                        </NavLink>\r\n                        <NavLink to='/settings' style={{textDecoration: 'none'}}>\r\n                            <IconButton><SettingsIcon/></IconButton>\r\n                        </NavLink>\r\n\r\n                    </Typography>\r\n                    {\r\n                        login\r\n                            ?\r\n                            <>\r\n                                <Button\r\n                                    onClick={logoutHandle}\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                    startIcon={<ExitToAppIcon/>}>\r\n                                    Log Out\r\n                                </Button>\r\n                            </>\r\n                            :\r\n                            <NavLink to={'/login'} style={{textDecoration: 'none'}}>\r\n                                <Button\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                    startIcon={<VpnKeyIcon/>}>\r\n                                    Log In\r\n                                </Button>\r\n                            </NavLink>\r\n                    }\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Route path=\"/counter\" render={() => <Counter/>}/>\r\n            <Route path=\"/todo\" render={() => <ToDo/>}/>\r\n            <Route path=\"/profile/:userID?\" render={() => <Profile/>}/>\r\n            <Route path=\"/users\" render={() => <Users/>}/>\r\n            <Route path=\"/login\" render={() => <SignupForm/>}/>\r\n            <Route path=\"/settings\" render={() => <Settings/>}/>\r\n        </Grid>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./State/Store\";\r\nimport {App} from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <HashRouter basename='/'>\r\n          <Provider store={store}>\r\n              <App />\r\n          </Provider>\r\n      </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}