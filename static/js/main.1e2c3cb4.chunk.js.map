{"version":3,"sources":["reportWebVitals.ts","Reducers/Counter-reducer.ts","Reducers/App-reducer.ts","Reducers/ToDoLists-Reducer.ts","Reducers/ToDoTasks-Reducer.ts","Reducers/Users-reducers.ts","Reducers/Auth-reducer.ts","Reducers/Profile-reducer.ts","State/Store.ts","Components/Counter/Display.tsx","Components/Counter/InputComponent.tsx","Components/Counter/DisplayWithInput.tsx","Components/Counter/Counter.tsx","Components/ToDo/Multi-Input.tsx","Components/ToDo/Editable-Span.tsx","Components/ToDo/ToDo-List.tsx","Components/Utils/Error-Component.tsx","Components/ToDo/ToDo.tsx","Images/atom.png","Components/Profile/MyProfile.tsx","Components/Profile/Posts.tsx","Components/Profile/Profile.tsx","Components/Users/User.tsx","Components/Users/Users.tsx","Images/welcome.jpg","Components/Login/Formik-login.tsx","Components/Settings/Settings.tsx","App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","value","startValue","maxValue","setStartValueAC","type","setMaxValueAC","status","error","setStatusAC","setErrorAC","changeToDoStatusAC","todoID","addToDoThunk","title","dispatch","axios","post","withCredentials","headers","response","data","resultCode","id","v1","addToDoAC","messages","length","changeTaskStatusAC","taskID","users","total","pageSize","currentPage","setUsersThunk","get","items","totalCount","page","email","login","isAuth","setAuthAC","setAuthThunk","a","profile","setProfileThunk","userID","rootReducer","combineReducers","counter","state","action","newValue","lists","newArray","map","el","filter","entityStatus","newToDo","filterTodoLists","find","tasks","stateCopy2","stateCopy","forEach","taskName","isDone","entityStatusTask","newTasks","app","auth","store","createStore","applyMiddleware","thunk","window","subscribe","localStorage","setItem","JSON","stringify","getState","useStyles","makeStyles","root","maxWidth","media","height","Display","props","useSelector","useDispatch","classes","Card","className","elevation","style","backgroundColor","borderRadius","CardActionArea","CardContent","Typography","variant","color","textAlign","CardActions","Button","onClick","size","startIcon","InputComponent","TextField","label","InputLabelProps","shrink","onChange","e","parseFloat","currentTarget","marginTop","width","DisplayWithInput","CardHeader","getItem","valueAsNumber","parse","startValueAsNumber","maxValueAsNumber","Counter","useState","number","setNumber","setMaxValue","Grid","container","spacing","justify","margin","item","to","MultiInput","React","memo","console","log","toDo","setToDo","addToDo","useCallback","InputProps","startAdornment","InputAdornment","position","IconButton","aria-label","fontSize","EditableSpan","editMode","setEditMode","setTitle","onDoubleClick","autoFocus","onBlur","changeTaskName","ToDoList","useEffect","setTasksAC","setTaskName","setError","onAddTask","trim","addTask","filterTasks","t","Paper","padding","deleteToDo","disabled","helperText","Checkbox","checked","changeCheckBox","inputProps","deleteTask","Delete","ButtonGroup","filterTask","Alert","ErrorSnackbar","open","handleClose","event","reason","Snackbar","autoHideDuration","onClose","severity","ToDo","todoLists","loading","res","delete","deleteToDoAC","deleteToDoThunk","addTaskAC","catch","message","addTaskThunk","deleteTaskAC","deleteTaskThunk","filterTaskAC","changeCheckBoxAC","changeTaskNameAC","LinearProgress","MyProfile","meID","userName","fullName","userProfile","xs","avatar","Avatar","src","photos","large","ava","subheader","aboutMe","component","display","lookingForAJob","lookingForAJobDescription","List","ListItem","alignItems","ListItemAvatar","ListItemText","primary","Divider","href","Posts","name","posts","setPosts","newPost","setNewPost","alt","secondary","Fragment","Profile","useParams","lg","User","photo","Users","Pagination","count","shape","SignupForm","formik","useFormik","initialValues","password","onSubmit","values","img","handleSubmit","FormControl","marginLeft","FormLabel","target","FormGroup","getFieldProps","FormControlLabel","control","Settings","contacts","github","facebook","website","userId","put","resetForm","fullWidth","marginBottom","handleChange","App","flexGrow","AppBar","Toolbar","textDecoration","path","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e2c3cb4.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","const initialState = {\r\n    value: 0 as number,\r\n    startValue: 0 as number,\r\n    maxValue: 0 as number\r\n}\r\ntype initialStateType = typeof initialState\r\n\r\nexport const counterReducer = (state:initialStateType = initialState , action: actionType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"INC_VALUE\":\r\n            return {\r\n                ...state,\r\n                value: state.value + 1\r\n            };\r\n        case \"RESET_VALUE\":\r\n            return {\r\n                ...state,\r\n                value: state.value = 0\r\n            }\r\n        case \"SET_VALUE\":\r\n            return {\r\n                ...state,\r\n                value: action.newValue\r\n            }\r\n        case \"SET_START_VALUE\":\r\n            return {\r\n                ...state,\r\n                startValue: action.startValue\r\n            }\r\n        case \"SET_MAX_VALUE\":\r\n            return {\r\n                ...state,\r\n                maxValue: action.maxValue\r\n            }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const incValueAC = () => ({type: 'INC_VALUE'} as const)\r\nexport const resetValueAC = () => ({type:'RESET_VALUE'} as const)\r\nexport const setStartValueAC = (startValue:number) => ({type:'SET_START_VALUE',startValue} as const)\r\nexport const setMaxValueAC = (maxValue: number) => ({type:'SET_MAX_VALUE',maxValue} as const)\r\nexport const setValueAC = (newValue:number) => ({type:'SET_VALUE', newValue} as const)\r\n\r\nexport type incValueActionType = ReturnType<typeof incValueAC>\r\nexport type resetValueActionType = ReturnType<typeof resetValueAC>\r\nexport type setStartValueActionType = ReturnType<typeof setStartValueAC>\r\nexport type setMaxValueActionType = ReturnType<typeof setMaxValueAC>\r\nexport type setValueActionType = ReturnType<typeof setValueAC>\r\n\r\nexport type actionType = incValueActionType | resetValueActionType |\r\n    setStartValueActionType | setMaxValueActionType | setValueActionType","\r\nexport type statusType = 'loading' | 'succeeded' | 'failed'\r\n\r\n\r\nconst initialState = {\r\n    status: 'loading' as statusType,\r\n    error: null as string | null\r\n}\r\n\r\ntype initialStateType = typeof initialState\r\n\r\ntype setStatusType = ReturnType<typeof setStatusAC>\r\ntype setErrorType = ReturnType<typeof setErrorAC>\r\n\r\ntype actionType = setStatusType | setErrorType\r\n\r\nexport const appReducer = (state: initialStateType = initialState, action: actionType) => {\r\n    switch (action.type) {\r\n        case \"SET_STATUS\":\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case \"SET_ERROR\":\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setStatusAC = (status: statusType) => {\r\n    return {type: 'SET_STATUS', status} as const\r\n}\r\nexport const setErrorAC = (error: string | null) => {\r\n    return {type: 'SET_ERROR', error} as const\r\n}\r\n","import {filterType, todoListsType} from \"../Components/ToDo/ToDo\";\r\nimport {v1} from \"uuid\";\r\nimport axios from \"axios\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setErrorAC, setStatusAC} from \"./App-reducer\";\r\n\r\nexport type addToDoType = {\r\n    type: 'ADD_TODO'\r\n    title: string\r\n    id: string\r\n}\r\ntype deleteToDoType = {\r\n    type: 'DELETE_TODO'\r\n    id: string\r\n}\r\ntype filterTaskType = {\r\n    type: 'FILTER_TASK'\r\n    todoID: string\r\n    filter: filterType\r\n}\r\nexport type setToDoType = {\r\n    type: 'SET_TODO'\r\n    newArray: Array<todoListsType>\r\n}\r\ntype changeToDoStatusType = ReturnType<typeof changeToDoStatusAC>\r\n\r\ntype actionType = addToDoType | deleteToDoType | filterTaskType | setToDoType | changeToDoStatusType\r\n\r\n\r\nconst initialState: Array<todoListsType> = []\r\n\r\nexport const ToDoListsReducer = (state: Array<todoListsType> = initialState, action: actionType) => {\r\n    switch (action.type) {\r\n        case \"SET_TODO\":\r\n            return action.newArray.map(el => {\r\n                return {\r\n                    ...el,\r\n                    filter: 'all',\r\n                    entityStatus:false\r\n                }\r\n            })\r\n        case \"ADD_TODO\":\r\n            let newToDo = {id: action.id, title: action.title, filter: 'all',  entityStatus:false}\r\n            return [newToDo, ...state];\r\n        case \"DELETE_TODO\":\r\n            return state.filter(el => el.id !== action.id);\r\n        case \"FILTER_TASK\":\r\n            let filterTodoLists = state.find(el => el.id === action.todoID)\r\n            if (filterTodoLists) {\r\n                filterTodoLists.filter = action.filter\r\n            }\r\n            return [...state];\r\n        case \"CHANGE_TODO_STATUS\":\r\n            return state.map(el => {\r\n                if(el.id === action.todoID) {\r\n                    return {...el, entityStatus:action.status}\r\n                } else return el\r\n            })\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setToDoAC = (newArray: Array<todoListsType>): setToDoType => {\r\n    return {type: 'SET_TODO', newArray}\r\n}\r\nexport const addToDoAC = (title: string): addToDoType => {\r\n    return {type: 'ADD_TODO', title, id: v1()}\r\n}\r\nexport const deleteToDoAC = (id: string): deleteToDoType => {\r\n    return {type: 'DELETE_TODO', id}\r\n}\r\nexport const filterTaskAC = (todoID: string, filter: filterType): filterTaskType => {\r\n    return {type: 'FILTER_TASK', todoID, filter}\r\n}\r\nexport const changeToDoStatusAC = (todoID: string, status: boolean) => {\r\n    return {type: 'CHANGE_TODO_STATUS', todoID, status} as const\r\n}\r\n\r\nexport const setToDoThunk = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setStatusAC('loading'))\r\n        axios.get('https://social-network.samuraijs.com/api/1.1/todo-lists',\r\n            {\r\n                withCredentials: true,\r\n                headers: {\r\n                    'api-key': 'c2e39203-417e-4936-90ba-36cd8b9b6c99'\r\n                }\r\n            })\r\n            .then(res => {\r\n                dispatch(setToDoAC(res.data))\r\n                dispatch(setStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addToDoThunk = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setStatusAC('loading'))\r\n        axios.post('https://social-network.samuraijs.com/api/1.1/todo-lists', {title},\r\n            {\r\n                withCredentials: true,\r\n                headers: {\r\n                    'api-key': 'c2e39203-417e-4936-90ba-36cd8b9b6c99'\r\n                }\r\n            }).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(addToDoAC(title))\r\n                dispatch(setStatusAC('succeeded'))\r\n            } else {\r\n                {\r\n                    debugger\r\n                    if (response.data.messages.length) {\r\n                        dispatch(setErrorAC(response.data.messages[0]))\r\n                    } else {\r\n                        dispatch(setErrorAC('Some error occurred'))\r\n                    }\r\n                    dispatch(setStatusAC('failed'))\r\n                }\r\n\r\n            }\r\n\r\n        })\r\n    }\r\n}\r\n\r\nexport const deleteToDoThunk = (id: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setStatusAC('loading'))\r\n        dispatch(changeToDoStatusAC(id,true))\r\n        axios.delete(`https://social-network.samuraijs.com/api/1.1//todo-lists/${id}`,\r\n            {\r\n                withCredentials: true,\r\n                headers: {\r\n                    'api-key': 'c2e39203-417e-4936-90ba-36cd8b9b6c99'\r\n                }\r\n            }).then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(deleteToDoAC(id))\r\n                dispatch(setStatusAC('succeeded'))\r\n                dispatch(changeToDoStatusAC(id,false))\r\n            }\r\n\r\n        })\r\n    }\r\n}","import {tasksType, taskType} from \"../Components/ToDo/ToDo\";\r\nimport {v1} from \"uuid\";\r\nimport {addToDoType, changeToDoStatusAC, setToDoType} from \"./ToDoLists-Reducer\";\r\nimport axios from \"axios\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setErrorAC, setStatusAC} from \"./App-reducer\";\r\n\r\n\r\ntype addTaskType = ReturnType<typeof addTaskAC>\r\ntype deleteTaskType = ReturnType<typeof deleteTaskAC>\r\ntype changeCheckBoxType = ReturnType<typeof changeCheckBoxAC>\r\ntype changeTaskNameType = ReturnType<typeof changeTaskNameAC>\r\ntype setTasksType = ReturnType<typeof setTasksAC>\r\ntype changeTaskStatusType = ReturnType<typeof changeTaskStatusAC>\r\n\r\ntype actionType = addTaskType\r\n    | deleteTaskType\r\n    | changeCheckBoxType\r\n    | changeTaskNameType\r\n    | addToDoType\r\n    | setToDoType\r\n    | setTasksType\r\n    | changeTaskStatusType\r\n\r\nconst initialState: tasksType = {}\r\n\r\n\r\nexport const ToDoTaskReducer = (state: tasksType = initialState, action: actionType) => {\r\n    switch (action.type) {\r\n\r\n        case \"SET_TASKS\":\r\n            const stateCopy2 = {...state}\r\n            stateCopy2[action.todoID] = action.tasks\r\n            return stateCopy2\r\n\r\n        case \"SET_TODO\":\r\n            const stateCopy = {...state}\r\n            action.newArray.forEach(el => {\r\n                stateCopy[el.id] = []\r\n            })\r\n            return stateCopy\r\n\r\n        case \"ADD_TASK\":\r\n            state[action.todoID] = [{id: v1(), title: action.taskName, isDone: false, entityStatusTask:false}, ...state[action.todoID]]\r\n            return {...state};\r\n\r\n        case \"DELETE_TASK\":\r\n            const newTasks = state[action.todoID]\r\n            state[action.todoID] = newTasks.filter(el => el.id !== action.taskID)\r\n            return {...state};\r\n\r\n        case \"CHANGE_CHECK_BOX\":\r\n            return {\r\n                ...state,\r\n                [action.todoID]: state[action.todoID].map(el => {\r\n                    if (el.id === action.taskID) {\r\n                        return {...el, isDone: action.isDone}\r\n                    } else return el\r\n                })\r\n            };\r\n\r\n        case \"CHANGE_TASK_NAME\":\r\n            return {\r\n                ...state,\r\n                [action.todoID]: state[action.todoID].map(el => {\r\n                    if (el.id === action.taskID) {\r\n                        return {...el, title: action.taskName}\r\n                    } else return el\r\n                })\r\n            }\r\n\r\n        case \"ADD_TODO\":\r\n            return {...state, [action.id]: []};\r\n\r\n        case \"CHANGE_TASK_STATUS\":\r\n            return {\r\n                ...state,\r\n                [action.todoID]: state[action.todoID].map(el => {\r\n                    if (el.id === action.taskID) {\r\n                        return {...el, entityStatusTask:action.status}\r\n                    } else return el\r\n                })\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setTasksAC = (todoID: string, tasks: Array<taskType>) => {\r\n    return {type: 'SET_TASKS', todoID, tasks} as const\r\n}\r\nexport const addTaskAC = (todoID: string, taskName: string) => {\r\n    return {type: 'ADD_TASK', todoID, taskName} as const\r\n}\r\nexport const deleteTaskAC = (todoID: string, taskID: string) => {\r\n    return {type: 'DELETE_TASK', todoID, taskID} as const\r\n}\r\nexport const changeCheckBoxAC = (todoID: string, taskID: string, isDone: boolean) => {\r\n    return {type: 'CHANGE_CHECK_BOX', todoID, taskID, isDone} as const\r\n}\r\nexport const changeTaskNameAC = (todoID: string, taskID: string, taskName: string) => {\r\n    return {type: 'CHANGE_TASK_NAME', todoID, taskID, taskName} as const\r\n}\r\nexport const changeTaskStatusAC = (todoID: string, taskID: string, status: boolean) => {\r\n    return {type: 'CHANGE_TASK_STATUS', todoID, taskID, status} as const\r\n}\r\n\r\nexport const setTasksThunk = (todoID: string) => {\r\n    console.log('setTasksThunk')\r\n    return (dispatch: Dispatch) => {\r\n        axios.get(`https://social-network.samuraijs.com/api/1.1/todo-lists/${todoID}/tasks`,\r\n            {\r\n                withCredentials: true,\r\n                headers: {\r\n                    'api-key': 'c2e39203-417e-4936-90ba-36cd8b9b6c99'\r\n                }\r\n            }).then(response => {\r\n            dispatch(setTasksAC(todoID, response.data.items))\r\n        })\r\n\r\n    }\r\n}\r\n\r\nexport const addTaskThunk = (todoID: string, title: string) => {\r\n\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setStatusAC('loading'))\r\n        axios.post(`https://social-network.samuraijs.com/api/1.1/todo-lists/${todoID}/tasks`, {title},\r\n            {\r\n                withCredentials: true,\r\n                headers: {\r\n                    'api-key': 'c2e39203-417e-4936-90ba-36cd8b9b6c99'\r\n                }\r\n            }).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(addTaskAC(todoID, title))\r\n                dispatch(setStatusAC('succeeded'))\r\n            } else {\r\n                {\r\n                    if (response.data.messages.length) {\r\n                        dispatch(setErrorAC(response.data.messages[0]))\r\n                    } else {\r\n                        dispatch(setErrorAC('Some error occurred'))\r\n                    }\r\n                    dispatch(setStatusAC('failed'))\r\n                }\r\n\r\n            }\r\n        })\r\n            .catch(error => {\r\n                dispatch(setErrorAC(error.message))\r\n                dispatch(setStatusAC('failed'))\r\n            })\r\n    }\r\n}\r\n\r\nexport const deleteTaskThunk = (todoID: string, taskID: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setStatusAC('loading'))\r\n        dispatch(changeTaskStatusAC(todoID,taskID,true))\r\n        axios.delete(`https://social-network.samuraijs.com/api/1.1/todo-lists/${todoID}/tasks/${taskID}`,\r\n            {\r\n                withCredentials: true,\r\n                headers: {\r\n                    'api-key': 'c2e39203-417e-4936-90ba-36cd8b9b6c99'\r\n                }\r\n            }).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(deleteTaskAC(todoID, taskID))\r\n                dispatch(changeTaskStatusAC(todoID,taskID,false))\r\n                dispatch(setStatusAC('succeeded'))\r\n            }\r\n        })\r\n    }\r\n}\r\n","import {Dispatch} from \"redux\";\r\nimport axios from \"axios\";\r\nimport {setStatusAC} from \"./App-reducer\";\r\n\r\ntype photosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport type userItemType = {\r\n    id: number\r\n    name: string\r\n    status: string\r\n    photos: photosType\r\n    followed: boolean\r\n}\r\n\r\nexport type setCurrentPageType = ReturnType<typeof setCurrentPageAC>\r\nexport type setTotalType = ReturnType<typeof setTotalAC>\r\nexport type addUsersType = ReturnType<typeof setUsersAC>\r\n\r\ntype actionType = addUsersType | setTotalType | setCurrentPageType\r\n\r\ntype initialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    users: [] as Array<userItemType>,\r\n    total: 0,\r\n    pageSize: 10,\r\n    currentPage: 1\r\n}\r\n\r\n\r\nexport const usersReducer = (state: initialStateType = initialState, action: actionType) => {\r\n\r\n    switch (action.type) {\r\n        case \"ADD_USERS\":\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            };\r\n        case \"SET_TOTAL\":\r\n            return {\r\n                ...state,\r\n                total: action.total\r\n            }\r\n        case \"SET_CURRENT_PAGE\":\r\n            return {\r\n                ...state,\r\n                currentPage: action.page\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setUsersAC = (users: Array<userItemType>) => {\r\n    return {type: 'ADD_USERS', users} as const\r\n}\r\nexport const setTotalAC = (total: number) => {\r\n    return {type: 'SET_TOTAL', total} as const\r\n}\r\nexport const setCurrentPageAC = (page: number) => {\r\n    return {type: 'SET_CURRENT_PAGE', page} as const\r\n}\r\n\r\nexport const setUsersThunk = (pageSize: number, currentPage: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setStatusAC('loading'))\r\n        axios.get(` https://social-network.samuraijs.com/api/1.0/users?count=${pageSize}&page=${currentPage}`,\r\n            {\r\n                withCredentials: true,\r\n                headers: {\r\n                    'api-key': 'c2e39203-417e-4936-90ba-36cd8b9b6c99'\r\n                }\r\n            })\r\n            .then(response => {\r\n                dispatch(setUsersAC(response.data.items))\r\n                dispatch(setTotalAC(response.data.totalCount))\r\n                dispatch(setCurrentPageAC(currentPage))\r\n                dispatch(setStatusAC('succeeded'))\r\n            })\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport axios from \"axios\";\r\n\r\n\r\ntype setAuthType = ReturnType<typeof setAuthAC>\r\n\r\ntype actionType = setAuthType\r\n\r\nconst initialState = {\r\n    id: null as number | null,\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false\r\n}\r\n\r\ntype initialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: initialStateType = initialState, action: actionType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_AUTH\":\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setAuthAC = (id: number, email: string, login: string, isAuth: boolean) => {\r\n    return {type: 'SET_AUTH', data: {id, email, login, isAuth}} as const\r\n}\r\n\r\nexport const setAuthThunk = () => {\r\n    return async (dispatch: Dispatch) => {\r\n        const response = await axios.get(` https://social-network.samuraijs.com/api/1.0/auth/me`,\r\n            {\r\n                withCredentials: true,\r\n                headers: {\r\n                    'api-key': 'c2e39203-417e-4936-90ba-36cd8b9b6c99'\r\n                }\r\n            })\r\n        const {id, email, login} = response.data.data\r\n        dispatch(setAuthAC(id, email, login, true))\r\n    }\r\n}\r\n\r\nexport const loginThunk = (email:string, password:string) => {\r\n    return (dispatch:Dispatch) => {\r\n        axios.post('https://social-network.samuraijs.com/api/1.1/auth/login', {email,password},\r\n            {\r\n                withCredentials: true,\r\n                headers: {\r\n                    'api-key': 'c2e39203-417e-4936-90ba-36cd8b9b6c99'\r\n                }\r\n            }).then(response => {\r\n                if(response.data.resultCode === 0) {\r\n                    // @ts-ignore\r\n                    dispatch(setAuthThunk())\r\n                }\r\n        })\r\n    }\r\n}\r\n\r\nexport const logoutThunk = () => {\r\n    return (dispatch:Dispatch) => {\r\n        axios.delete('https://social-network.samuraijs.com/api/1.1/auth/login',\r\n            {\r\n                withCredentials: true,\r\n                headers: {\r\n                    'api-key': 'c2e39203-417e-4936-90ba-36cd8b9b6c99'\r\n                }\r\n            }).then(response => {\r\n            if(response.data.resultCode === 0) {\r\n                // @ts-ignore\r\n                dispatch(setAuthAC(null,null,null,false))\r\n            }\r\n        })\r\n    }\r\n}","import axios from \"axios\";\r\nimport {setErrorAC, setStatusAC} from \"./App-reducer\";\r\n\r\ntype contactsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\n\r\ntype photosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport type profileType = {\r\n    userId: number\r\n    aboutMe:string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: contactsType\r\n    photos: photosType\r\n\r\n}\r\n\r\ntype initialStateType = typeof initialState\r\n\r\ntype setProfileType = ReturnType<typeof setProfileAC>\r\n\r\ntype actionType = setProfileType\r\n\r\nconst initialState = {\r\n    profile: {} as profileType\r\n}\r\n\r\nexport const profileReducer = (state: initialStateType = initialState, action: actionType) => {\r\n    switch (action.type) {\r\n        case \"SET_PROFILE\":\r\n            return {\r\n                ...state,\r\n                profile: {...action.profile}\r\n            }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const setProfileAC = (profile: profileType) => {\r\n    return {type: 'SET_PROFILE', profile} as const\r\n}\r\n\r\nexport const setProfileThunk = (userID: number) => {\r\n    return (dispatch: any) => {\r\n        axios.get(` https://social-network.samuraijs.com/api/1.0/profile/${userID}`,\r\n            {\r\n                withCredentials: true,\r\n                headers: {\r\n                    'api-key': 'c2e39203-417e-4936-90ba-36cd8b9b6c99'\r\n                }\r\n            }).then(response => {\r\n            dispatch(setProfileAC(response.data))\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateProfileThunk = (profile: any) => {\r\n    return (dispatch:any, getState:any) => {\r\n        let userId = getState().auth.userId\r\n        axios.put(` https://social-network.samuraijs.com/api/1.0/profile`, {...profile},\r\n            {\r\n                withCredentials: true,\r\n                headers: {\r\n                    'api-key': 'c2e39203-417e-4936-90ba-36cd8b9b6c99'\r\n                }\r\n            }).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setProfileThunk(userId))\r\n            } else {\r\n                if (response.data.messages.length) {\r\n                    dispatch(setErrorAC(response.data.messages[0]))\r\n                } else {\r\n                    dispatch(setErrorAC('Some error occurred'))\r\n                }\r\n                dispatch(setStatusAC('failed'))\r\n            }\r\n        })\r\n    }\r\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {counterReducer} from \"../Reducers/Counter-reducer\";\r\nimport {ToDoListsReducer} from \"../Reducers/ToDoLists-Reducer\";\r\nimport {ToDoTaskReducer} from \"../Reducers/ToDoTasks-Reducer\";\r\nimport {usersReducer} from \"../Reducers/Users-reducers\";\r\nimport thunk from 'redux-thunk';\r\nimport {appReducer} from \"../Reducers/App-reducer\";\r\nimport {authReducer} from \"../Reducers/Auth-reducer\";\r\nimport {profileReducer} from \"../Reducers/Profile-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer,\r\n    lists:ToDoListsReducer,\r\n    tasks:ToDoTaskReducer,\r\n    users:usersReducer,\r\n    app:appReducer,\r\n    auth:authReducer,\r\n    profile:profileReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer,  applyMiddleware(thunk))\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nstore.subscribe(() => {\r\n    localStorage.setItem('value', JSON.stringify(store.getState().counter.value))\r\n    localStorage.setItem('startValue', JSON.stringify(store.getState().counter.startValue))\r\n    localStorage.setItem('maxValue', JSON.stringify(store.getState().counter.maxValue))\r\n})","import React, {useEffect} from \"react\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../State/Store\";\r\nimport {incValueAC, resetValueAC} from \"../../Reducers/Counter-reducer\";\r\n\r\n\r\ntype propsType = {\r\n    number: number\r\n    setNumber: (number: number) => void\r\n    maxValue: number\r\n    setMaxValue: (number: number) => void\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        maxWidth: 345,\r\n    },\r\n    media: {\r\n        height: 140,\r\n    },\r\n});\r\n\r\nexport function Display(props: propsType) {\r\n\r\n    const value = useSelector<AppStateType, number>((state) => state.counter.value)\r\n    const maxValue = useSelector<AppStateType,number>((state => state.counter.maxValue))\r\n    const dispatch = useDispatch()\r\n\r\n    /*useEffect(() => {\r\n        let maxValue = localStorage.getItem('maxValueKey')\r\n        if (maxValue) {\r\n            let maxValueAsNumber = JSON.parse(maxValue)\r\n            props.setMaxValue(maxValueAsNumber)\r\n        }\r\n    }, [props.maxValue])*/\r\n\r\n    const classes = useStyles();\r\n\r\n    const style: any = {\r\n        color: 'red',\r\n        textAlign: 'center'\r\n    }\r\n\r\n\r\n    const onClickHandler = () => {\r\n\r\n        if (value !== maxValue) {\r\n            dispatch(incValueAC())\r\n            /*props.setNumber(props.number + 1)*/\r\n        }\r\n    }\r\n    const resetOnClick = () => {\r\n        dispatch(resetValueAC())\r\n        /*props.setNumber(0)*/\r\n    }\r\n\r\n    const styleCard = {\r\n        backgroundColor:'#f3f2ef',\r\n        borderRadius:'15px',\r\n    }\r\n\r\n    return (\r\n        <Card className={classes.root} elevation={2} style={styleCard}>\r\n            <CardActionArea>\r\n                <CardContent>\r\n                    <Typography variant='h3'>\r\n                        {\r\n                            value >= maxValue ? <h1 style={style}>{value}</h1> :\r\n                                <h1 style={{textAlign: 'center'}}>{value}</h1>\r\n                        }\r\n                    </Typography>\r\n                </CardContent>\r\n            </CardActionArea>\r\n            <CardActions>\r\n                <Button\r\n                    style={{borderRadius:'15px'}}\r\n                    onClick={onClickHandler}\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    size=\"large\"\r\n                    startIcon={<AddIcon/>}>\r\n                    INC\r\n                </Button>\r\n                <Button\r\n                    style={{borderRadius:'15px'}}\r\n                    onClick={resetOnClick}\r\n                    variant=\"outlined\"\r\n                    color=\"secondary\"\r\n                    size=\"large\"\r\n                    startIcon={<RotateLeftIcon/>}>\r\n                    RESET\r\n                </Button>\r\n            </CardActions>\r\n        </Card>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent} from 'react'\r\nimport {TextField} from \"@material-ui/core\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../State/Store\";\r\nimport {setMaxValueAC, setStartValueAC} from \"../../Reducers/Counter-reducer\";\r\n\r\n/*type propsType = {\r\n    setMaxValue:(maxValue:number)=>void\r\n    setStartValue:(startValue:number)=>void\r\n    maxValue:number\r\n    startValue:number\r\n}*/\r\n\r\nexport function InputComponent() {\r\n\r\n    const startValue = useSelector<AppStateType,number>((state => state.counter.startValue))\r\n    const maxValue = useSelector<AppStateType,number>((state => state.counter.maxValue))\r\n    const dispatch = useDispatch()\r\n\r\n    const onChangeMaxValue = (e:ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setMaxValueAC(parseFloat(e.currentTarget.value)))\r\n       /* props.setMaxValue(parseFloat(e.currentTarget.value) )*/\r\n    }\r\n    const onChangeStartValue = (e:ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setStartValueAC(parseFloat(e.currentTarget.value)))\r\n       /* props.setStartValue(parseFloat(e.currentTarget.value) )*/\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <TextField\r\n                id=\"outlined-number\"\r\n                label=\"Max value\"\r\n                type=\"number\"\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n                variant=\"outlined\"\r\n                onChange={onChangeMaxValue}\r\n                /*value={props.maxValue}*/\r\n                value={maxValue}\r\n            />\r\n            <TextField\r\n                style={{marginTop: '10px'}}\r\n                id=\"outlined-number\"\r\n                label=\"Start value\"\r\n                type=\"number\"\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n                variant=\"outlined\"\r\n                onChange={onChangeStartValue}\r\n                /*value={props.startValue}*/\r\n                value={startValue}\r\n            />\r\n        </>\r\n    )\r\n}","import CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {InputComponent} from \"./InputComponent\";\r\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setMaxValueAC, setStartValueAC, setValueAC} from \"../../Reducers/Counter-reducer\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 250,\r\n    },\r\n    media: {\r\n        height: 140,\r\n        width: 140\r\n    },\r\n});\r\n\r\ntype propsType = {\r\n    setNumber: (number: number) => void\r\n    setMaxValue:(number:number) => void\r\n}\r\n\r\n\r\nexport function DisplayWithInput(props: propsType) {\r\n\r\n    const classes = useStyles();\r\n\r\n    const dispatch = useDispatch()\r\n\r\n   /* const [maxValue, setMaxValue] = useState(0)\r\n    const [startValue, setStartValue] = useState(0)*/\r\n\r\n    /*useEffect(() => {\r\n        let startValue = localStorage.getItem('startValueKey')\r\n        let maxValue = localStorage.getItem('maxValueKey')\r\n        if (maxValue && startValue) {\r\n            let valueAsNumber = JSON.parse(startValue)\r\n            props.setNumber(valueAsNumber)\r\n            setStartValue(+startValue)\r\n            setMaxValue(+maxValue)\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('maxValueKey', JSON.stringify(maxValue))\r\n        localStorage.setItem('startValueKey', JSON.stringify(startValue))\r\n    }, [maxValue, startValue])*/\r\n\r\n\r\n    const onSetValuesFromStorage = () => {\r\n\r\n        let value = localStorage.getItem('startValue')\r\n        if(value) {\r\n            let valueAsNumber = JSON.parse(value)\r\n            dispatch(setValueAC(valueAsNumber))\r\n        }\r\n\r\n        let startValue = localStorage.getItem('startValue')\r\n        if (startValue) {\r\n            let startValueAsNumber = JSON.parse(startValue)\r\n            /*props.setNumber(valueAsNumber)*/\r\n            dispatch(setStartValueAC(startValueAsNumber))\r\n        }\r\n\r\n        let maxValue = localStorage.getItem('maxValue')\r\n        if(maxValue) {\r\n            let maxValueAsNumber = JSON.parse(maxValue)\r\n          /*  props.setMaxValue(maxValueAsNumber)*/\r\n            dispatch(setMaxValueAC(maxValueAsNumber))\r\n        }\r\n    }\r\n\r\n\r\n    const styleCard = {\r\n        backgroundColor:'#f3f2ef',\r\n        borderRadius:'15px',\r\n    }\r\n\r\n    return (\r\n        <Card className={classes.root} elevation={2} style={styleCard}>\r\n           <CardHeader title='Counter'/>\r\n            <CardContent>\r\n                <InputComponent />\r\n            </CardContent>\r\n            <CardActions>\r\n                <Button\r\n                    style={{borderRadius:'15px'}}\r\n                    onClick={onSetValuesFromStorage}\r\n                    variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    size=\"large\"\r\n                    startIcon={<SaveAltIcon />}>\r\n                    Save\r\n                </Button>\r\n            </CardActions>\r\n        </Card>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {Display} from \"./Display\";\r\nimport {DisplayWithInput} from \"./DisplayWithInput\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\n\r\nexport function Counter() {\r\n\r\n    const [number, setNumber] = useState(0)\r\n    const [maxValue, setMaxValue] = useState(0)\r\n    // @ts-ignore\r\n    const login = useSelector<AppStateType, string>((state) => state.auth.login)\r\n\r\n    if(!login) {\r\n        return <Redirect to=\"/login\" />\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={3} justify=\"center\" style={{margin:'20px'}}>\r\n            <Grid item >\r\n                <Display number = {number} setNumber = {setNumber}\r\n                         maxValue={maxValue} setMaxValue={setMaxValue}/>\r\n            </Grid>\r\n            <Grid item>\r\n                <DisplayWithInput setNumber={setNumber} setMaxValue={setMaxValue}/>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}","import React, {ChangeEvent, useCallback, useState} from \"react\";\r\nimport {IconButton, InputAdornment, TextField} from \"@material-ui/core\";\r\nimport FormatListNumberedIcon from '@material-ui/icons/FormatListNumbered';\r\nimport LibraryAddIcon from '@material-ui/icons/LibraryAdd';\r\n\r\n\r\ntype propsType = {\r\n    addToDo: (title: string) => void\r\n}\r\n\r\n\r\n\r\nexport const MultiInput = React.memo((props:propsType) => {\r\n\r\n    console.log('INPUT')\r\n\r\n    const [toDo, setToDo] = useState('')\r\n\r\n    const addToDo = useCallback(() => {\r\n\r\n        props.addToDo(toDo)\r\n        setToDo('')\r\n    },[props.addToDo,toDo])\r\n\r\n    const onChangeToDo = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setToDo(e.currentTarget.value)\r\n\r\n    }\r\n\r\n    return (\r\n        <div style={{margin:'10px'}}>\r\n            <TextField\r\n                onChange={onChangeToDo}\r\n                value={toDo}\r\n                label=\"Add ToDo-List\"\r\n                InputProps={{\r\n                    startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                            <FormatListNumberedIcon />\r\n                        </InputAdornment>\r\n                    ),\r\n                }}\r\n            />\r\n            <IconButton aria-label=\"delete\" onClick={addToDo}>\r\n                <LibraryAddIcon fontSize=\"large\"/>\r\n            </IconButton>\r\n\r\n        </div>\r\n    )\r\n})","import React, {ChangeEvent, useState} from 'react'\r\n\r\ntype propsType = {\r\n    value:string\r\n    changeTaskName:(taskName:string) => void\r\n}\r\n\r\nexport const EditableSpan = (props:propsType) => {\r\n    console.log('SPAN')\r\n    const [editMode, setEditMode] = useState(true)\r\n    const [title, setTitle] = useState(props.value)\r\n\r\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onBlueHandler = () => {\r\n        props.changeTaskName(title)\r\n        setEditMode(true)\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            {\r\n                editMode\r\n                    ? <span onDoubleClick={() => setEditMode(false)}>{props.value}</span>\r\n                    : <input value = {title} autoFocus onChange={onChangeHandler} onBlur={onBlueHandler} />\r\n            }\r\n\r\n        </>\r\n    )\r\n}","import React, {ChangeEvent, useCallback, useEffect, useState} from \"react\";\r\nimport {filterType, taskType} from \"./ToDo\";\r\nimport {Button, ButtonGroup, Checkbox, IconButton, Paper, TextField} from \"@material-ui/core\";\r\nimport PlaylistAddIcon from '@material-ui/icons/PlaylistAdd';\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {EditableSpan} from \"./Editable-Span\";\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport {setTasksThunk} from \"../../Reducers/ToDoTasks-Reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype propsType = {\r\n    filter:filterType\r\n    tasks: Array<taskType>\r\n    title: string\r\n    id: string\r\n    addTask: (todoID: string, taskName: string) => void\r\n    deleteTask: (todoID: string, taskID: string) => void\r\n    filterTask: (todoID: string, filter: filterType) => void\r\n    changeCheckBox: (todoID: string, taskID: string, isDone: boolean) => void\r\n    changeTaskName: (todoID: string, taskID: string, taskName: string) => void\r\n    deleteToDo:(id:string) => void\r\n    entityStatus:boolean\r\n}\r\n\r\n const ToDoList = React.memo((props: propsType) => {\r\n\r\n    console.log('TODO')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setTasksThunk(props.id))\r\n    },[dispatch])\r\n\r\n    const [taskName, setTaskName] = useState('')\r\n    const [error, setError] = useState('')\r\n\r\n    const onAddTask = useCallback(() => {\r\n        if (taskName.trim() !== '') {\r\n            props.addTask(props.id, taskName)\r\n            setTaskName('')\r\n            setError('')\r\n        } else setError('Incorrect entry.')\r\n    },[ props.addTask,props.id,taskName])\r\n\r\n    const taskOnChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTaskName(e.currentTarget.value)\r\n    }\r\n\r\n    let filterTasks = props.tasks\r\n    if (props.filter === 'active') {\r\n        filterTasks = filterTasks.filter(t => !t.isDone)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        filterTasks = filterTasks.filter(t => t.isDone)\r\n    }\r\n\r\n     const styleCard = {\r\n         backgroundColor:'#f3f2ef',\r\n         borderRadius:'15px',\r\n         padding:'10px'\r\n     }\r\n\r\n    return (\r\n        <Paper elevation={3} style={styleCard}>\r\n\r\n            <h3>\r\n                {props.title ? `${props.title}` : 'ToDo'}\r\n                <IconButton onClick={() => props.deleteToDo(props.id)} disabled={props.entityStatus}>\r\n                    <HighlightOffIcon/>\r\n                </IconButton>\r\n            </h3>\r\n\r\n            <TextField\r\n                size='small'\r\n                error={!!error}\r\n                label=\"Add task\"\r\n                variant=\"outlined\"\r\n                onChange={taskOnChange}\r\n                value={taskName}\r\n                helperText={error}\r\n            />\r\n\r\n            <IconButton onClick={onAddTask}>\r\n                <PlaylistAddIcon/>\r\n            </IconButton>\r\n\r\n            {\r\n                filterTasks.map(el => {\r\n\r\n                    let onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n                        props.changeCheckBox(props.id, el.id, e.currentTarget.checked)\r\n                    }\r\n                    const onchangeTaskName = (taskName: string) => {\r\n                        props.changeTaskName(props.id, el.id, taskName)\r\n                    }\r\n\r\n                    return (\r\n                        <div>\r\n\r\n                            <Checkbox\r\n                                checked={el.isDone}\r\n                                onChange={onChangeHandler}\r\n                                inputProps={{'aria-label': 'primary checkbox'}}\r\n                            />\r\n                            {' '}\r\n                            <EditableSpan value={el.title} changeTaskName={onchangeTaskName}/>\r\n                            <IconButton aria-label=\"delete\" onClick={() => props.deleteTask(props.id, el.id)}\r\n                                        disabled={el.entityStatusTask}>\r\n                                <Delete/>\r\n                            </IconButton>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n            <div>\r\n                <ButtonGroup variant=\"text\" color=\"primary\" aria-label=\"text primary button group\">\r\n                    <Button onClick={() => props.filterTask(props.id, 'all')}>All</Button>\r\n                    <Button onClick={() => props.filterTask(props.id, 'active')}>Active</Button>\r\n                    <Button onClick={() => props.filterTask(props.id, 'completed')}>Completed</Button>\r\n                </ButtonGroup>\r\n            </div>\r\n        </Paper>\r\n    )\r\n})\r\n\r\nexport default ToDoList\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../State/Store\";\r\nimport {setErrorAC} from \"../../Reducers/App-reducer\";\r\n\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const open = useSelector<AppStateType,string | null>((state) => state.app.error)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n       dispatch(setErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={open !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {open}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {MultiInput} from \"./Multi-Input\";\r\nimport ToDoList from \"./ToDo-List\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport LinearProgress from '@material-ui/core/LinearProgress'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../State/Store\";\r\nimport {\r\n    addToDoThunk,\r\n    deleteToDoThunk,\r\n    filterTaskAC,\r\n    setToDoThunk\r\n} from \"../../Reducers/ToDoLists-Reducer\";\r\nimport {\r\n    addTaskThunk,\r\n    changeCheckBoxAC,\r\n    changeTaskNameAC,\r\n    deleteTaskThunk\r\n} from \"../../Reducers/ToDoTasks-Reducer\";\r\nimport {statusType} from \"../../Reducers/App-reducer\";\r\nimport {ErrorSnackbar} from \"../Utils/Error-Component\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nexport type todoListsType = {\r\n    id: string\r\n    title: string\r\n    filter: filterType\r\n    entityStatus: boolean\r\n}\r\n\r\nexport type taskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n    entityStatusTask:boolean\r\n}\r\nexport type tasksType = {\r\n    [key: string]: Array<taskType>\r\n}\r\nexport type filterType = 'all' | 'active' | 'completed'\r\n\r\nfunction ToDo() {\r\n\r\n    const todoLists = useSelector<AppStateType,Array<todoListsType>>(state => state.lists)\r\n    const tasks = useSelector<AppStateType,tasksType>(state => state.tasks)\r\n    const loading = useSelector<AppStateType,statusType>(state => state.app.status)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setToDoThunk())\r\n    }, [])\r\n\r\n    const addToDo = useCallback((title: string) => {\r\n        dispatch(addToDoThunk(title))\r\n    },[dispatch])\r\n\r\n    const deleteToDo = useCallback( (id: string) => {\r\n        dispatch(deleteToDoThunk(id))\r\n    },[dispatch])\r\n\r\n    const addTask = useCallback((todoID: string, taskName: string) => {\r\n        dispatch(addTaskThunk(todoID,taskName))\r\n    },[dispatch])\r\n\r\n    const deleteTask = useCallback((todoID: string, taskID: string) => {\r\n        dispatch(deleteTaskThunk(todoID,taskID))\r\n    }, [dispatch])\r\n\r\n    const filterTask = useCallback((todoID: string, filter: filterType) => {\r\n        dispatch(filterTaskAC(todoID,filter))\r\n    },[dispatch])\r\n\r\n    const changeCheckBox = useCallback((todoID: string, taskID: string, isDone: boolean) => {\r\n        dispatch(changeCheckBoxAC(todoID,taskID,isDone))\r\n    },[dispatch])\r\n\r\n    const changeTaskName = useCallback((todoID: string, taskID: string, taskName: string) => {\r\n        dispatch(changeTaskNameAC(todoID,taskID,taskName))\r\n    },[dispatch])\r\n\r\n    // @ts-ignore\r\n    const login = useSelector<AppStateType, string>((state) => state.auth.login)\r\n\r\n    if(!login) {\r\n        return <Redirect to=\"/login\" />\r\n    }\r\n\r\n    return (\r\n\r\n        <div style={{margin:'30px'}}>\r\n            {loading === 'loading' && <LinearProgress/>}\r\n\r\n            <ErrorSnackbar/>\r\n\r\n            <Grid container>\r\n                <MultiInput addToDo={addToDo}/>\r\n            </Grid>\r\n\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todoLists.map(el => {\r\n\r\n                            return (\r\n                                <Grid item>\r\n                                    <ToDoList\r\n                                        filter={el.filter}\r\n                                        key={el.id}\r\n                                        tasks={tasks[el.id]}\r\n                                        title={el.title}\r\n                                        id={el.id}\r\n                                        entityStatus = {el.entityStatus}\r\n                                        addTask={addTask}\r\n                                        deleteTask={deleteTask}\r\n                                        filterTask={filterTask}\r\n                                        changeCheckBox={changeCheckBox}\r\n                                        changeTaskName={changeTaskName}\r\n                                        deleteToDo={deleteToDo}\r\n                                    />\r\n                                </Grid>\r\n                            )\r\n                        }\r\n                    )\r\n                }\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDo","export default __webpack_public_path__ + \"static/media/atom.64448b2b.png\";","import React, {useEffect} from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../State/Store\";\r\nimport {profileType, setProfileThunk} from \"../../Reducers/Profile-reducer\";\r\nimport ava from './../../Images/atom.png'\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport WorkOutlineIcon from \"@material-ui/icons/WorkOutline\";\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\nimport HttpIcon from '@material-ui/icons/Http';\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\nimport PlaylistAddCheckIcon from '@material-ui/icons/PlaylistAddCheck';\r\n\r\ntype propsType = {\r\n    id: string\r\n}\r\n\r\nexport function MyProfile(props: propsType) {\r\n\r\n\r\n    const meID = useSelector<AppStateType, number>((state) => state.auth.id!)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        props.id ? dispatch(setProfileThunk(+props.id)) : dispatch(setProfileThunk(meID))\r\n    }, [props.id, meID])\r\n\r\n    const userName = useSelector<AppStateType, string>((state) => state.profile.profile.fullName)\r\n    const userProfile = useSelector<AppStateType, profileType>((state) => state.profile.profile)\r\n\r\n\r\n    return (\r\n\r\n        <Grid container spacing={2}>\r\n\r\n            <Grid item xs={12}>\r\n\r\n                <Card elevation={2} style={{borderRadius:'20px',backgroundColor:'#f3f2ef'}}>\r\n                        <CardHeader\r\n                            avatar={\r\n                                <Avatar\r\n                                    style={{height:'100px',width:'100px'}}\r\n                                    aria-label=\"recipe\"\r\n                                    src={userProfile\r\n                                    ? userProfile.photos?.large\r\n                                    : ava} />\r\n                            }\r\n                            title={userName}\r\n                            subheader={userProfile.aboutMe}\r\n                        />\r\n                        <CardContent>\r\n                            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                Имею опыт создания веб-приложений со стеком React-Redux-TypeScript.\r\n                                Открыт для ваших предложений.\r\n                                <IconButton aria-label=\"settings\">\r\n                                    <CreateIcon />\r\n                                </IconButton>\r\n                            </Typography>\r\n                            <Typography >\r\n                                <div style={{display:'flex'}}>\r\n                                    <WorkOutlineIcon/>\r\n                                    &nbsp;\r\n                                    <span>Open to work :</span>\r\n                                    &nbsp;\r\n                                    <span>{userProfile.lookingForAJob ? <DoneIcon/> : <ClearIcon/>}</span>\r\n                                </div>\r\n                            </Typography>\r\n                            <div style={{display:'flex'}}>\r\n                                <span><PlaylistAddCheckIcon/></span>\r\n                                &nbsp;\r\n                            <Typography>\r\n                               Skills: {userProfile.lookingForAJobDescription}\r\n                            </Typography>\r\n                            </div>\r\n                        </CardContent>\r\n                </Card>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Card elevation={2} style={{borderRadius:'20px',backgroundColor:'#f3f2ef'}}>\r\n                    <CardHeader title='Contacts'/>\r\n                    <List>\r\n                        <ListItem alignItems=\"flex-start\">\r\n                            <ListItemAvatar>\r\n                               <GitHubIcon/>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary=\"GitHub\"\r\n                            />\r\n                        </ListItem>\r\n                        <Divider variant=\"inset\" component=\"li\" />\r\n                        <ListItem alignItems=\"flex-start\">\r\n                            <ListItemAvatar>\r\n                                <LinkedInIcon/>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={<a href={'https://www.linkedin.com/in/victor-demin-react/'}>www.linkedin.com</a>}\r\n                            />\r\n                        </ListItem>\r\n                        <Divider variant=\"inset\" component=\"li\" />\r\n                        <ListItem alignItems=\"flex-start\">\r\n                            <ListItemAvatar>\r\n                                <HttpIcon/>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary=\"WebSite\"\r\n                            />\r\n                        </ListItem>\r\n                        <Divider variant=\"inset\" component=\"li\" />\r\n                        <ListItem alignItems=\"flex-start\">\r\n                            <ListItemAvatar>\r\n                                <FacebookIcon/>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary=\"Facebook\"\r\n                            />\r\n                        </ListItem>\r\n                        <Divider variant=\"inset\" component=\"li\" />\r\n                    </List>\r\n                </Card>\r\n            </Grid>\r\n\r\n        </Grid>\r\n\r\n    )\r\n\r\n}\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\r\nimport Card from \"@material-ui/core/Card\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\n\r\ntype postType = {\r\n    id:number\r\n    name:string\r\n    message:string\r\n    data:string\r\n}\r\n\r\nexport function Posts() {\r\n\r\n    const [posts,setPosts] = useState<Array<postType>>([\r\n        {id:1, name:'Don', message:'Kavabanga', data:'20.20.2021'},\r\n        {id:2, name:'Leo', message:'Kavabanga', data:'20.20.2021'},\r\n        {id:3, name:'Mike', message:'Kavabanga', data:'20.20.2021'},\r\n        {id:4, name:'Raf', message:'Kavabanga', data:'20.20.2021'},\r\n    ])\r\nconst [newPost,setNewPost] = useState('')\r\n\r\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        setNewPost(e.currentTarget.value)\r\n    }\r\n    const addPost = (message:string) => {\r\n        let post = {id:1, name:'Don', message:message, data:'20.20.2021'}\r\n        setPosts([post,...posts])\r\n        setNewPost('')\r\n    }\r\n\r\n    return (\r\n        <Card elevation={2} style={{borderRadius:'20px',backgroundColor:'#f3f2ef'}}>\r\n            <div style={{padding:'10px 10px 10px 10px'}}>\r\n                <TextField\r\n                    onChange={onChangeHandler}\r\n                    value={newPost}\r\n                    label=\"Add post\"\r\n                    InputProps={{\r\n                        startAdornment: (\r\n                            <InputAdornment position=\"start\">\r\n                                <MailOutlineIcon />\r\n                            </InputAdornment>\r\n                        ),\r\n                    }}\r\n                />\r\n                <IconButton onClick={() => addPost(newPost)}>\r\n                    <SendIcon fontSize=\"large\"/>\r\n                </IconButton>\r\n            </div>\r\n\r\n            {\r\n                posts.map(el => {\r\n                    return (\r\n                        <List>\r\n                            <ListItem alignItems=\"flex-start\">\r\n                                <ListItemAvatar>\r\n                                    <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/1.jpg\" />\r\n                                </ListItemAvatar>\r\n                                <ListItemText\r\n                                    primary=\"Brunch this weekend?\"\r\n                                    secondary={\r\n                                        <React.Fragment>\r\n                                            <Typography\r\n                                                component=\"span\"\r\n                                                variant=\"body2\"\r\n                                                color=\"textPrimary\"\r\n                                            >\r\n                                                Ali Connors\r\n                                            </Typography>\r\n                                            {\" — I'll be in your neighborhood doing errands this…\"}\r\n                                        </React.Fragment>\r\n                                    }\r\n                                />\r\n                            </ListItem>\r\n                            <Divider variant=\"inset\" component=\"li\" />\r\n                        </List>\r\n                    )\r\n                })\r\n            }\r\n        </Card>\r\n    );\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {MyProfile} from \"./MyProfile\";\r\nimport {Posts} from \"./Posts\";\r\nimport {Redirect, useParams} from 'react-router-dom';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../State/Store\";\r\n\r\n\r\nexport function Profile() {\r\n\r\n    // @ts-ignore\r\n    const {userID} = useParams()\r\n\r\n\r\n    // @ts-ignore\r\n    const login = useSelector<AppStateType, string>((state) => state.auth.login)\r\n\r\n    if (!login) {\r\n        return <Redirect to=\"/login\"/>\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={5} style={{margin: '20px'}}>\r\n            <Grid xs={12} lg={6} item>\r\n                <MyProfile id={userID}/>\r\n            </Grid>\r\n            <Grid xs={12} lg={6} item>\r\n                <Posts/>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}","import React from 'react'\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport PersonAddDisabledIcon from \"@material-ui/icons/PersonAddDisabled\";\r\nimport PersonAddIcon from \"@material-ui/icons/PersonAdd\";\r\nimport ava from './../../Images/atom.png'\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport List from \"@material-ui/core/List\";\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\ntype propsType = {\r\n    name: string\r\n    status: string\r\n    photo: string\r\n    id: number\r\n}\r\n\r\n\r\nexport function User(props: propsType) {\r\n\r\n    return (\r\n        <List key={props.id}>\r\n            <ListItem alignItems=\"flex-start\">\r\n                <ListItemAvatar>\r\n                    <NavLink to={'profile/' + props.id}>\r\n                        <Avatar alt=\"Remy Sharp\"\r\n                                src={props.photo ? props.photo : ava}\r\n                                style={{width: '50px', height: '50px'}}\r\n                        />\r\n                    </NavLink>\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                    primary={props.name}\r\n                    secondary={\r\n                        <React.Fragment>\r\n                            <Typography\r\n                                component=\"span\"\r\n                                variant=\"body2\"\r\n                                color=\"textPrimary\"\r\n                            >\r\n                                Status:\r\n                            </Typography>\r\n                            {props.status}\r\n                        </React.Fragment>\r\n                    }\r\n                />\r\n                <IconButton>\r\n                    <PersonAddDisabledIcon/>\r\n                </IconButton>\r\n                <IconButton>\r\n                    <PersonAddIcon/>\r\n                </IconButton>\r\n            </ListItem>\r\n            <Divider variant=\"inset\" component=\"li\"/>\r\n        </List>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport Card from \"@material-ui/core/Card\";\r\nimport {User} from \"./User\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setUsersThunk, userItemType} from \"../../Reducers/Users-reducers\";\r\nimport {AppStateType} from \"../../State/Store\";\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport {statusType} from \"../../Reducers/App-reducer\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nexport function Users() {\r\n\r\n    const dispatch = useDispatch()\r\n    const users = useSelector<AppStateType, Array<userItemType>>((state) => state.users.users)\r\n    const pageSize = useSelector<AppStateType, number>((state) => state.users.pageSize)\r\n    const currentPage = useSelector<AppStateType, number>((state) => state.users.currentPage)\r\n    const total = useSelector<AppStateType, number>((state) => state.users.total)\r\n    const loading = useSelector<AppStateType, statusType>(state => state.app.status)\r\n\r\n    useEffect(() => {\r\n        dispatch(setUsersThunk(pageSize, currentPage))\r\n    }, [])\r\n\r\n\r\n    const handleChange = (event: React.ChangeEvent<unknown>, value: number) => {\r\n        dispatch(setUsersThunk(pageSize, value))\r\n    };\r\n\r\n    // @ts-ignore\r\n    const login = useSelector<AppStateType, string>((state) => state.auth.login)\r\n\r\n    if(!login) {\r\n        return <Redirect to=\"/login\" />\r\n    }\r\n\r\n    const styleCard = {\r\n        backgroundColor:'#f3f2ef',\r\n        borderRadius:'15px',\r\n        margin: '10px'\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12}>\r\n            {loading === 'loading' && <LinearProgress/>}\r\n\r\n                <Pagination count={total} variant=\"outlined\" shape=\"rounded\" page={currentPage}\r\n                            onChange={handleChange} style={{padding: '10px'}}/>\r\n\r\n                <Card elevation={2} style={styleCard}>\r\n                    {\r\n                        users.map(el => {\r\n                            return <User name={el.name} status={el.status} photo={el.photos.large} id={el.id}/>\r\n                        })\r\n                    }\r\n                </Card>\r\n        </Grid>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export default __webpack_public_path__ + \"static/media/welcome.05eb5518.jpg\";","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginThunk} from \"../../Reducers/Auth-reducer\";\r\nimport img from './../../Images/welcome.jpg'\r\nimport {AppStateType} from \"../../State/Store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nexport const SignupForm = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginThunk(values.email, values.password))\r\n        },\r\n    });\r\n\r\n    // @ts-ignore\r\n    const login = useSelector<AppStateType, string>((state) => state.auth.login)\r\n\r\n    if(login) {\r\n        return <Redirect to=\"/profile\" />\r\n    }\r\n\r\n    return (\r\n        <Grid container justify=\"center\" spacing={2} >\r\n            <Grid item xs={12} lg={6}>\r\n                    <img src={img} style={{maxWidth:'100%'}}/>\r\n            </Grid>\r\n            <Grid item xs={12} lg={4}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl style={{marginLeft:'20px'}}>\r\n                        <FormLabel>\r\n                            <p>To log in get registered{' '}\r\n                                <a href={'https://social-network.samuraijs.com/'}\r\n                                   target={'_blank'}>here\r\n                                </a>\r\n                            </p>\r\n                            <p>or use common test account credentials:</p>\r\n                            <p>Email: free@samuraijs.com</p>\r\n                            <p>Password: free</p>\r\n                        </FormLabel>\r\n                        <FormGroup>\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('email')}\r\n                            />\r\n                            <TextField\r\n                                type=\"password\"\r\n                                label=\"Password\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('password')}\r\n                            />\r\n                            <FormControlLabel\r\n                                label={'Remember me'}\r\n                                control={<Checkbox/>}\r\n                            />\r\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n\r\n    );\r\n};","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport { updateProfileThunk} from \"../../Reducers/Profile-reducer\";\r\nimport {ErrorSnackbar} from \"../Utils/Error-Component\";\r\n\r\n\r\ntype contactsType = {\r\n    github: string\r\n    facebook: string\r\n    website: string\r\n}\r\n\r\ntype valuesType = {\r\n    aboutMe: string\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: contactsType\r\n}\r\n\r\nexport const Settings = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            aboutMe: '',\r\n            lookingForAJobDescription: '',\r\n            fullName: '',\r\n            contacts: {\r\n                github: '',\r\n                facebook: '',\r\n                website: '',\r\n            }\r\n        },\r\n        onSubmit: (values:valuesType) => {\r\n            console.log(values)\r\n            dispatch(updateProfileThunk(values))\r\n            formik.resetForm()\r\n        },\r\n    });\r\n\r\n\r\n    return (\r\n        <Grid container justify=\"center\">\r\n            <ErrorSnackbar/>\r\n            <Grid item xs={12} lg={5}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl fullWidth>\r\n                        <FormLabel>\r\n                            <h2>Change description</h2>\r\n                        </FormLabel>\r\n                        <Card\r\n                            style={{padding: '20px', marginBottom: '10px', borderRadius:'20px',backgroundColor:'#f3f2ef'}}\r\n                            elevation={2}>\r\n                            <FormGroup>\r\n                                <FormControlLabel\r\n                                    label={'Looking for a job'}\r\n                                    control={<Checkbox/>}\r\n                                    onChange={formik.handleChange}\r\n                                />\r\n                                <TextField\r\n                                    size='small'\r\n                                    label=\"about me\"\r\n                                    margin=\"normal\"\r\n                                    name=\"aboutMe\"\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.aboutMe}\r\n                                />\r\n                                <TextField\r\n                                    size='small'\r\n                                    label=\"skills\"\r\n                                    margin=\"normal\"\r\n                                    name=\"lookingForAJobDescription\"\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.lookingForAJobDescription}\r\n                                />\r\n                                <TextField\r\n                                    size='small'\r\n                                    label=\"name\"\r\n                                    margin=\"normal\"\r\n                                    name=\"fullName\"\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.fullName}\r\n                                />\r\n                                <TextField\r\n                                    size='small'\r\n                                    label=\"github\"\r\n                                    margin=\"normal\"\r\n                                    name=\"contacts.github\"\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.contacts.github}\r\n                                />\r\n                                <TextField\r\n                                    size='small'\r\n                                    label=\"facebook\"\r\n                                    margin=\"normal\"\r\n                                    name=\"contacts.facebook\"\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.contacts.facebook}\r\n                                />\r\n                                <TextField\r\n                                    size='small'\r\n                                    label=\"website\"\r\n                                    margin=\"normal\"\r\n                                    name=\"contacts.website\"\r\n                                    onChange={formik.handleChange}\r\n                                    value={formik.values.contacts.website}\r\n                                />\r\n                                <Button size={\"medium\"} type={'submit'} variant={'outlined'}\r\n                                        color={'primary'}>Save</Button>\r\n                            </FormGroup>\r\n                        </Card>\r\n                    </FormControl>\r\n                </form>\r\n            </Grid>\r\n        </Grid>\r\n\r\n    );\r\n};","import React, {useEffect} from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport {NavLink, Route} from 'react-router-dom';\r\nimport AlarmIcon from '@material-ui/icons/Alarm';\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport FormatListNumberedIcon from '@material-ui/icons/FormatListNumbered';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport VpnKeyIcon from '@material-ui/icons/VpnKey';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport {Counter} from \"./Components/Counter/Counter\";\r\nimport ToDo from \"./Components/ToDo/ToDo\";\r\nimport {Profile} from \"./Components/Profile/Profile\";\r\nimport {Users} from \"./Components/Users/Users\";\r\nimport {SignupForm} from \"./Components/Login/Formik-login\";\r\nimport {logoutThunk, setAuthThunk} from \"./Reducers/Auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {Settings} from \"./Components/Settings/Settings\";\r\n\r\n\r\nexport function App() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    // @ts-ignore\r\n    const login = useSelector<AppStateType, string>((state) => state.auth.login)\r\n\r\n    useEffect(() => {\r\n        dispatch(setAuthThunk())\r\n    }, [])\r\n\r\n    const logoutHandle = () => {\r\n        dispatch(logoutThunk())\r\n    }\r\n\r\n\r\n    return (\r\n        <Grid container style={{flexGrow: 1}}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" style={{flexGrow: 1}}>\r\n                        <NavLink to='/counter' style={{textDecoration: 'none'}}>\r\n                            <IconButton><AlarmIcon/></IconButton>\r\n                        </NavLink>\r\n                        <NavLink to='/users' style={{textDecoration: 'none'}}>\r\n                            <IconButton><GroupAddIcon/></IconButton>\r\n                        </NavLink>\r\n                        <NavLink to='/profile' style={{textDecoration: 'none'}}>\r\n                            <IconButton><PersonIcon/></IconButton>\r\n                        </NavLink>\r\n                        <NavLink to='/todo' style={{textDecoration: 'none'}}>\r\n                            <IconButton><FormatListNumberedIcon/></IconButton>\r\n                        </NavLink>\r\n                        <NavLink to='/settings' style={{textDecoration: 'none'}}>\r\n                            <IconButton><SettingsIcon/></IconButton>\r\n                        </NavLink>\r\n\r\n                    </Typography>\r\n                    {\r\n                        login\r\n                            ?\r\n                            <>\r\n                                <Button\r\n                                    onClick={logoutHandle}\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                    startIcon={<ExitToAppIcon/>}>\r\n                                    Log Out\r\n                                </Button>\r\n                            </>\r\n                            :\r\n                            <NavLink to={'/login'} style={{textDecoration: 'none'}}>\r\n                                <Button\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                    startIcon={<VpnKeyIcon/>}>\r\n                                    Log In\r\n                                </Button>\r\n                            </NavLink>\r\n                    }\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Route path=\"/counter\" render={() => <Counter/>}/>\r\n            <Route path=\"/todo\" render={() => <ToDo/>}/>\r\n            <Route path=\"/profile/:userID?\" render={() => <Profile/>}/>\r\n            <Route path=\"/users\" render={() => <Users/>}/>\r\n            <Route path=\"/login\" render={() => <SignupForm/>}/>\r\n            <Route path=\"/settings\" render={() => <Settings/>}/>\r\n        </Grid>\r\n    );\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./State/Store\";\r\nimport {App} from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <BrowserRouter>\r\n          <Provider store={store}>\r\n              <App />\r\n          </Provider>\r\n      </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}